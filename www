set(groot,'defaultAxesLineWidth',1.5,'defaultLineLineWidth',1,'defaultFigureColor',[1 1 1],...
    'defaultAxesFontSize',14,'defaultFigurePosition',[1 39 750 650]);


% 
subs = {'P001','P002','P003','P004','P006','P007','P009','P010','P012'}; 
% subs = {'P002'};
colors = {
    [0.992, 0.498, 0.435],
    [0.494, 0.69, 0.835],
    [0.698, 0.878, 0.38],
    [0.741, 0.494, 0.745],
    [1, 0.71, 0.353],
    [1, 0.81, 0],
    [0.745, 0.725, 0.859],
    [0.992, 0.8, 0.898],
    [0.545, 0.827, 0.78]};

plotting = 0; 

l = 0.406; 

bigTable = table(); 

pks1 = []; 
pks2 = [];
pks3 = []; 
pks4 = [];
pks5 = []; 

%%%%% mean magnitude of wheel velocity for each speed setting: 
% speed 1: 0.3173 
% speed 2: 0.4284
% speed 3: 0.5474
% speed 4: 0.6956
% speed 5: n/a

%%%%% average wheel velocity (vL+vR)/2 for each speed setting: 
% speed 1: 0.2038 = 0.21 m/s
% speed 2: 0.2970 = 0.3 m/s
% speed 3: 0.3928 = 0.4 m/s
% speed 4: 0.4992 = 0.5 m/s
% speed 5: n/a



for subj = 1:length(subs)
%     close all; 
%     clearvars -except subs subj Data bigTable ALPscores; 
subID = subs{subj};

% loadDir = ['C:\Users\kingra\OneDrive - UW\2022 Pediatric Powered Mobility\Data\' subID '\Processed Data']; 
loadDir = ['/Users/kingra/Library/CloudStorage/OneDrive-UW/2022 Pediatric Powered Mobility/Data/' subID '/Processed Data'];
cd(loadDir)
disp(['Loading ' subID '...']);
load([subID '_Data.mat']); 
disp('done');

switch subID 
%     case 'P002'
%         visits = {'T1','T2','T3','T4'}; 
%         visitInd = 1:4; 
    case 'P001'
        visits = {'T2','T3','T4','T5','T6','T7','T8','T9','T10','T12'}; 
        visitInd = [2:10, 12]; 
    case 'P003'
        visits = {'T1','T2','T3','T4','T5','T6','T7','T8','T9','T10','T11'};
        visitInd = 1:11; 
    case 'P004'
        Data.P004.T9 = rmfield(Data.P004.T9,'S1'); % exclude (recording too short)
        visits = {'T1','T2','T3','T4','T5','T6','T7','T8','T9','T10','T11','T12'};
        visitInd = 1:12; 
    case {'P005','P008'} 
        visits = {'T1','T2','T3','T4'};
        visitInd = 1:4; 
    case 'P006'
        Data.P006.T3 = rmfield(Data.P006.T3,'S1'); % exclude (recording too short)
        Data.P006.T8 = rmfield(Data.P006.T8,'S1'); % exclude (recording too short)
        visits = {'T1','T2','T3','T4','T5','T6','T7','T8','T9','T10','T11','T12'};
        visitInd = 1:12;
    case 'P009'
        Data.P009.T12 = rmfield(Data.P009.T12,'S2'); % exclude (recording too short)
        visits = {'T1','T2','T3','T4','T5','T6','T7','T8','T9','T10','T11','T12'};
        visitInd = 1:12; 
    case 'P010'
        visits = {'T1','T2','T4','T5','T6','T7','T8','T9','T10','T11','T12'};
        visitInd = [1:2, 4:12]; 
    case 'P011'
        if contains(fieldnames(Data.P011.T3),'S2')
            Data.P001.T3 = rmfield(Data.P001.T3,'S2');
        end
    case 'P012'
        visits = {'T1','T3','T4','T5','T6','T7','T8','T9','T10','T11','T12'};
        visitInd = [1, 3:12]; 
    case 'P013'
%         visits = {'T1','T2','T3','T4','T5'};
%         visitInd = 1:5; 
        visits = {'T1','T2','T3','T4'};
        visitInd = 1:4; 
    otherwise
        visits = {'T1','T2','T3','T4','T5','T6','T7','T8','T9','T10','T11','T12'};
        visitInd = 1:12; 
end

switch subID 
    case 'P001'
        ALPscores = [1; NaN; 2; 2; 1; 3; 3; 3; 3; NaN; 3; 3]; 
        speed = [ones(9,2); repmat(2,3,2)]; 
    case 'P002'
        ALPscores = [3; 5; 5; 5; 6; 5; 5; 6; 6; 6; 6; 6]; 
        speed = [1 1; 1 NaN; repmat(2,4,2); 1 1; 1 1; 2 2; 2 2; 2 2; 2 2]; 
    case 'P003'
        ALPscores = [2; 2; 3; 4; 5; 5; 6; 6; 7; 7; 7; 7];
        speed = [1 1; repmat(2,2,2); 2 3; repmat(3,2,2); 3 4; repmat(4,3,2); 4 4; NaN NaN];
    case 'P004'
        ALPscores = [1; 2; 3; 3; 4; 4; 3; 4; 3; 3; 3; 3];
        speed = [1 1; 2 3; repmat(3,7,2); 1 1; 1 2; 3 3];
    case 'P006'
        ALPscores = [2; 3; 4; 4; 4; 4; 4; 4; 5; 5; 5; 6];
        speed = [repmat(1,6,2); repmat(2,6,2)]; 
    case 'P007'
        ALPscores = [2; 2; 2; 3; 3; 2; 3; 3; 3; 3; 3; 3];
        speed = [1 2; 1 3; repmat(3,4,2); 4 4; 3 3; 3 2; 3 2; 3 2; 3 3]; 
    case 'P009'
        ALPscores = [4; 4; 4; 4; 4; 5; 5; 5; 5; 6; 5; 6];
        speed = [1 1; repmat(2,3,2); 2 3; 3 2; 3 2; 3 2; 3 2; 3 3; 3 2; 3 2];
    case 'P010'
        ALPscores = [2; 2; 2; 3; 3; 3; 4; 3; 3; 4; 4; 4];
        speed = [repmat(1,3,2); 1 1; 2 2; 3 3; 3 2; 3 2; repmat(3,4,2)];  
    case 'P012'
        ALPscores = [2; 2; 3; 3; 3; 2; 3; 4; 5; 5; 5; 5];
        speed = [1 1; 1 3; repmat(3,3,2); 3 3; repmat(3,6,2)]; 
end

speedVals = speed; 
speedVals(speed==1) = 0.21; 
speedVals(speed==2) = 0.3; 
speedVals(speed==3) = 0.4; 
speedVals(speed==4) = 0.5; 

sampFreq = 120; 

blue = [0    0.4471    0.7412];
red = [0.8510    0.3255    0.0980];
white = [1 1 1];
purple = [0.4940 0.1840 0.5560];
green = [0.4660 0.6740 0.1880]; 
yellow = [0.9290 0.6940 0.1250]; 
medblue = (blue*2+white)/3;
ltblue = (blue+2*white)/3; 
medred = (red*2+white)/3;
ltred = (red+2*white)/3; 
medyellow = (yellow*2+white)/3; 
ltyellow = (yellow+2*white)/3; 
medgreen = (green*2+white)/3; 
ltgreen = (green+2*white)/3; 
dkgreen = [0.00,0.50,0.00]; 


%% Set up Data Structures of Interest  
dataAll = cell(12,2); 
joyData = cell(12,2); 
velData = cell(12,2); 
dispData = cell(12,2); 
dispDataA = cell(12,2);

for i = 1:length(visits)
    sessions = fields(Data.(subID).(visits{i}));
    ii = visitInd(i); 
    for j = 1:length(sessions) % sessions (S1, S2)
        if strcmp(sessions{j},'S1')
            jj = 1; 
        else
            jj = 2; 
        end
        flds = fields(Data.(subID).(visits{i}).(sessions{j}));
        recs = flds(contains(flds,'ALL'));

        if length(recs) > 1
            data = [];
            for k = 1:length(recs)
                data = [data; Data.(subID).(visits{i}).(sessions{j}).(recs{k})];
            end
        else
            data = Data.(subID).(visits{i}).(sessions{j}).(recs{1});
        end

        dataAll{ii,jj} = data; 

        % remove joystick and velocity artifacts close to zero
        joyX = data.JoyX;
        joyY = data.JoyY;
        velR = data.WheelVelR;
        velL = data.WheelVelL;
        dispR = data.WheelDispR;
        dispL = data.WheelDispL;
        joyX(abs(data.JoyX)<=3) = 0;
        joyY(abs(data.JoyY)<=3) = 0;
        velR(abs(data.WheelVelR)<=0.02) = 0;
        velL(abs(data.WheelVelL)<=0.02) = 0;
       

        % filter 
        joyX = smooth(joyX); joyY = smooth(joyY); % moving average window length = 5
        velR = smooth(velR); velL = smooth(velL); 

        % remove adult driving sessions to generate kid only data 
        joyXKid = joyX; joyYKid = joyY;
        velRKid = velR; velLKid = velL;
        dispRKid = dispR; dispLKid = dispL;
        dispRAdult = dispR; dispLAdult = dispL;
        joyXKid(data.AdultDrive==1) = 0;
        joyYKid(data.AdultDrive==1) = 0;
        velRKid(data.AdultDrive==1) = 0;
        velLKid(data.AdultDrive==1) = 0;
        dispRKid(data.AdultDrive==1) = NaN;
        dispLKid(data.AdultDrive==1) = NaN;
        dispRAdult(data.AdultDrive==0) = NaN;
        dispLAdult(data.AdultDrive==0) = NaN;

        % calculate norm to combine X/Y and L/R inputs
        joyKid = sqrt(joyXKid.^2 + joyYKid.^2);
        velKid = sqrt(velLKid.^2 + velRKid.^2); 
        dispKid = sqrt(dispLKid.^2 + dispRKid.^2);
        dispAdult = sqrt(dispLAdult.^2 + dispRAdult.^2);

        joyData{ii,jj} = table();  % <------ joyData will be a 12x2 cell with all the processed joystick data (joyX, joyY, joyXKid, joyYKid, joyKid)
        joyData{ii,jj}.joyX = joyX; joyData{ii,jj}.joyY = joyY; 
        joyData{ii,jj}.joyXKid = joyXKid; 
        joyData{ii,jj}.joyYKid = joyYKid; 
        joyData{ii,jj}.joyKid = joyKid; 
        joyData{ii,jj}.time = data.Time; 
        joyData{ii,jj}.joyXKidVel = [nan; diff(joyXKid)./diff(data.Time)];
        joyData{ii,jj}.joyYKidVel = [nan; diff(joyYKid)./diff(data.Time)];
        joyData{ii,jj}.joyKidVel = [nan; diff(joyKid)./diff(data.Time)];


        velData{ii,jj} = table(); % <------ velData will be a 12x2 cell with all the processed joystick data (velR, velL, velRKid, velLKid, velKid)
        velData{ii,jj}.velR = velR; velData{ii,jj}.velL = velL;
        velData{ii,jj}.velRKid = velRKid; velData{ii,jj}.velLKid = velLKid;
        velData{ii,jj}.velKid = velKid; 
        velData{ii,jj}.time = data.Time; 
        velData{ii,jj}.v = (velRKid + velLKid)/2; 
        velData{ii,jj}.w = 1/l*(velRKid-velLKid); 

        pks_tmp = []; 
%         figure(100001); hold all; 
        if speed(ii,jj) == 1
%             subplot(2,3,1); hold all;     
            pk_thresh = 0.3; 
            pk_thresh_avg = 0.18; 
        elseif speed(ii,jj) == 2
%             subplot(2,3,2); hold all; 
            pk_thresh = 0.4; 
            pk_thresh_avg = 0.28; 
        elseif speed(ii,jj) == 3
%             subplot(2,3,3); hold all; 
            pk_thresh = 0.5; 
            pk_thresh_avg = 0.38; 
        elseif speed(ii,jj) == 4
%             subplot(2,3,4); hold all; 
            pk_thresh = 0.6; 
            pk_thresh_avg = 0.48; 
        elseif speed(ii,jj) == 5
%             subplot(2,3,5); hold all; 
            pk_thresh = 0.7; 
        else
%             subplot(2,3,6); hold all; 
        end
        
%         plot(velData{ii,jj}.velKid,'displayname',[subID '_T' num2str(ii) '_S' num2str(jj)])
%         pks_tmp = findpeaks(velData{ii,jj}.velKid,'minpeakheight',pk_thresh); 
% 
%         plot((velData{ii,jj}.velLKid + velData{ii,jj}.velRKid)/2);
%         pks_tmp = findpeaks((velData{ii,jj}.velLKid + velData{ii,jj}.velRKid)/2,'minpeakheight',pk_thresh_avg); 

        if strcmp(subID,'P003') && ii == 11 && j == 2
        else
            if speed(ii,jj) == 1
                pks1 = [pks1; pks_tmp];
            elseif speed(ii,jj) == 2
                pks2 = [pks2; pks_tmp];
            elseif speed(ii,jj) == 3
                pks3 = [pks3; pks_tmp];
            elseif speed(ii,jj) == 4
                pks4 = [pks4; pks_tmp];
            elseif speed(ii,jj) == 5
                pks5 = [pks5; pks_tmp];
            end
        end

        ylim([-1, 1]);

        dispData{ii,jj} = table();  % <------ dispData will be a 12x2 cell dispData{ii,jj} contains a table with all the processed displacment data (dispR, dispL, dispRKid, dispLKid, dispKid)
        dispData{ii,jj}.dispR = dispR; dispData{ii,jj}.dispL = dispL;
        dispData{ii,jj}.dispRKid = dispRKid; dispData{ii,jj}.dispLKid = dispLKid;
        dispData{ii,jj}.dispKid = dispKid; 

        dispDataA{ii,jj} = table();  % <------ dispData will be a 12x2 cell dispData{ii,jj} contains a table with all the processed displacment data (dispR, dispL, dispRKid, dispLKid, dispKid)
        dispDataA{ii,jj}.dispR = dispR; dispDataA{ii,jj}.dispL = dispL;
        dispDataA{ii,jj}.dispRAdult = dispRAdult; dispDataA{ii,jj}.dispLAdult = dispLAdult;
        dispDataA{ii,jj}.dispAdult = dispAdult;
    end
end


%% Processing Adult Interventions
%%%% count = number of adult interventions per driving session
%%%% meanDur = mean duration of interventions, averaged over all interventions in a session
%%%% maxDur = maximum duration of intervention in a session
%%%% minDur = minimum duration of intervention in a session

signals = {'count','meanDur','maxDur','minDur'}; 
adultDrive = table();
for si = 1:length(signals)
    adultDrive.(signals{si}) = nan(12,2);
end

for i = 1:length(visits)
    sessions = fields(Data.(subID).(visits{i}));
    ii = visitInd(i); 
    for j = 1:length(sessions) % sessions (S1, S2)
        if strcmp(sessions{j},'S1')
            jj = 1; 
        else
            jj = 2; 
        end

        if (strcmp(subID,'P002') && strcmp(visits{i},'T1')) || (strcmp(subID,'P001') && strcmp(visits{i},'T1')) || (strcmp(subID,'P006') && strcmp(visits{i},'T7') && strcmp(sessions{j},'S2'))
            adultDrive.count(ii,jj) = -9999;
            adultDrive.meanDur(ii,jj) = -9999;
            adultDrive.maxDur(ii,jj) = -9999;
            adultDrive.minDur(ii,jj) = -9999;
        else
            data = dataAll{ii,jj}; 
            [~, ind_on] = findpeaks(diff(data.AdultDrive));
            ind_on = ind_on+1;
            [~, ind_off] = findpeaks(diff(-data.AdultDrive));
            adultDrive.count(ii,jj) = length(ind_on);
            if length(ind_on) > length(ind_off)
                ind_on = ind_on(1:end-1); 
            end
            if ~isempty(ind_on)
                adultDrive.meanDur(ii,jj) = mean((ind_off-ind_on)./120);
                adultDrive.maxDur(ii,jj) = max((ind_off-ind_on)./120);
                adultDrive.minDur(ii,jj) = min((ind_off-ind_on)./120);
            end
        end
    end
end

adultDriveKey = {'S1','S2','mean','std'}; % mean and std are calculated across sessions
metrics = adultDrive.Properties.VariableNames;  
for i = 1:length(metrics)
    adultDrive.(metrics{i})(:,3) = mean(adultDrive.(metrics{i})(:,1:2),2,'omitnan');
    adultDrive.(metrics{i})(:,4) = std(adultDrive.(metrics{i})(:,1:2),0,2,'omitnan');
end

%% Plotting Adult Interventions
if plotting == 1
switch subID
    case 'P002'
        xAxis = 2:12; 
    otherwise 
        xAxis = visitInd; 
end

figure; hold all; set(gcf,'name',[subID ': Adult Interventions']); 
subplot(221); hold all; 
bar(xAxis,adultDrive.count(xAxis,3),'facecolor',purple); 
plot(xAxis,adultDrive.count(xAxis,1),'ks','markerfacecolor','k'); 
plot(xAxis,adultDrive.count(xAxis,2),'ko'); 
legend('','S1','S2'); set(gca,'xtick',1:12); xlim([0,13]);
ylabel('# of Adult Interventions')
subplot(222); hold all; 
bar(xAxis,adultDrive.meanDur(xAxis,3),'facecolor',purple);
plot(xAxis,adultDrive.meanDur(xAxis,1),'ks','markerfacecolor','k'); 
plot(xAxis,adultDrive.meanDur(xAxis,2),'ko'); 
legend('','S1','S2'); set(gca,'xtick',1:12); xlim([0,13]);
% errorbar(xAxis, adultDrive.meanDur(xAxis,3), adultDrive.meanDur(xAxis,4),'k.'); 
ylabel('Mean Duration of Adlt Interven (s)')
title('Data analyzed per driving session'); 
subplot(223); hold all; 
bar(xAxis,adultDrive.maxDur(xAxis,3),'facecolor',purple);
plot(xAxis,adultDrive.maxDur(xAxis,1),'ks','markerfacecolor','k'); 
plot(xAxis,adultDrive.maxDur(xAxis,2),'ko'); 
legend('','S1','S2'); set(gca,'xtick',1:12); xlim([0,13]);
ylabel('Max Duration of Adlt Interven (s)')
xlabel('Visit #'); yMax = get(gca,'ylim'); 
subplot(224); hold all; 
bar(xAxis,adultDrive.minDur(xAxis,3),'facecolor',purple); 
plot(xAxis,adultDrive.minDur(xAxis,1),'ks','markerfacecolor','k'); 
plot(xAxis,adultDrive.minDur(xAxis,2),'ko'); 
legend('','S1','S2'); set(gca,'xtick',1:12); xlim([0,13]);
xlabel('Visit #'); 
ylabel('Min Duration of Adlt Interven (s)')

end
%% Processing Session Time and Driving Time
%%%% sessionTime = length of a session
%%%% activeTime = duration of time joystick was active
%%%% activeTimeKid = duration of time joystick was active, kid activation only
%%%% movingTime = duration of time EM was moving
%%%% movingTimeKid = duration of time EM as moving, kid activation only
%%%% activeTimeKidNorm = duration of time joystick was active (sec), kid activation only, normalized to total sessionTime (sec)
%%%% movingTimeKidNorm = duration of time EM as moving (sec), kid activation only, normalized to total sessionTime (sec)

%%%% joyActiveInd = all joystick indices where (joyX,joyY)~=(0,0)
%%%% joyMovingInd = all joystick indices where (velL,velR)~=(0,0)
%%%% joyActiveKidInd = all joystick indices where (joyXKid,joyYKid)~=(0,0)
%%%% joyMovingKidInd = all joystick indices where (velLKid,velRKid)~=(0,0)

signals = {'sessionTime','activeTime','movingTime',...
            'activeTimeKid','movingTimeKid','activeTimeKidNorm','movingTimeKidNorm','avgVelocity','avgAbsVelocity'}; 
driveMetrics = table(); 
for si = 1:length(signals)
    driveMetrics.(signals{si}) = nan(12,2);
end
joyActiveInd = cell(12,2); 
joyMovingInd = cell(12,2); 
joyActiveKidInd = cell(12,2); 
joyMovingKidInd = cell(12,2); 

for i = 1:length(visits)
    sessions = fields(Data.(subID).(visits{i}));
    ii = visitInd(i); 
    for j = 1:length(sessions) % sessions (S1, S2)
        if strcmp(sessions{j},'S1')
            jj = 1; 
        else
            jj = 2; 
        end
        flds = fields(Data.(subID).(visits{i}).(sessions{j}));
        recs = flds(contains(flds,'ALL'));

        if length(recs) > 1
            data = []; timePrev = 0; 
            for k = 1:length(recs)
                data = [data; Data.(subID).(visits{i}).(sessions{j}).(recs{k})];
                driveMetrics.sessionTime(ii,jj) = (timePrev + data.Time(end))/60; 
                timePrev = driveMetrics.sessionTime(ii,jj)*60; 
            end
        else
            data = Data.(subID).(visits{i}).(sessions{j}).(recs{1});
            driveMetrics.sessionTime(ii,jj) = data.Time(end)./60;
        end  

        joyActiveInd{ii,jj} = find(~(joyData{ii,jj}.joyX==0 & joyData{ii,jj}.joyY==0));
        joyMovingInd{ii,jj} = find(~(velData{ii,jj}.velR==0 & velData{ii,jj}.velL==0));
        joyActiveKidInd{ii,jj} = find(~(joyData{ii,jj}.joyXKid==0 & joyData{ii,jj}.joyYKid==0));
        joyMovingKidInd{ii,jj} = find(~(velData{ii,jj}.velRKid==0 & velData{ii,jj}.velLKid==0));

        driveMetrics.activeTime(ii,jj) = length(joyActiveInd{ii,jj})/sampFreq/60;
        driveMetrics.movingTime(ii,jj) = length(joyMovingInd{ii,jj})/sampFreq/60;

        driveMetrics.activeTimeKid(ii,jj) = length(joyActiveKidInd{ii,jj})/sampFreq/60;
        driveMetrics.movingTimeKid(ii,jj) = length(joyMovingKidInd{ii,jj})/sampFreq/60;

        driveMetrics.avgVelocity(ii,jj) =  mean((velData{ii,jj}.velLKid + velData{ii,jj}.velRKid)/2); 
        driveMetrics.avgAbsVelocity(ii,jj) = mean(abs((velData{ii,jj}.velLKid + velData{ii,jj}.velRKid)/2));

    end
end

driveMetrics.activeTimeKidNorm = driveMetrics.activeTimeKid./driveMetrics.sessionTime; 
driveMetrics.movingTimeKidNorm = driveMetrics.movingTimeKid./driveMetrics.sessionTime; 

driveMetricsKey = {'S1','S2','mean','std'}; % mean and std are calculated across sessions
metrics = driveMetrics.Properties.VariableNames;  
for i = 1:length(metrics)
    driveMetrics.(metrics{i})(:,3) = mean(driveMetrics.(metrics{i})(:,1:2),2,'omitnan');
    driveMetrics.(metrics{i})(:,4) = std(driveMetrics.(metrics{i})(:,1:2),0,2,'omitnan');
end

%% Plotting time-based Driving Metrics
if plotting == 1
figure; hold all; set(gcf,'name',[subID ': Driving Metrics (Time)']); 
subplot(221); hold all; 
ylabel('Time with Joystick Active (min)'); 
bar(driveMetrics.sessionTime(:,3),'facecolor',ltblue); 
bar(driveMetrics.activeTime(:,3),'facecolor', medblue); 
bar(driveMetrics.activeTimeKid(:,3),'facecolor',blue); 
errorbar(driveMetrics.sessionTime(:,3),driveMetrics.sessionTime(:,4),'k.')
set(gca,'xtick',1:12); xlabel('Visit')
l = legend('Total Time','Total Active Time', 'Total Active Time (Kid Only)','');
set(l,'fontsize',10); 

subplot(222); hold all; 
ylabel('Time Moving (min)'); 
bar(driveMetrics.sessionTime(:,3),'facecolor', ltred); 
bar(driveMetrics.movingTime(:,3),'facecolor', medred); 
bar(driveMetrics.movingTimeKid(:,3),'facecolor', red); 
errorbar(driveMetrics.sessionTime(:,3),driveMetrics.sessionTime(:,4),'k.')
set(gca,'xtick',1:12); xlabel('Visit')
l = legend('Total Time','Total Moving Time', 'Total Moving Time (Kid Only)','');
set(l,'fontsize',10); 

subplot(223); hold all; 
bar(driveMetrics.activeTimeKidNorm(:,3));
errorbar(driveMetrics.activeTimeKidNorm(:,3),driveMetrics.activeTimeKidNorm(:,4),'k.');
ylabel('% of Session');
set(gca,'xtick',1:12); xlabel('Visit'); ylim([0,1]);
l= legend('Active Time (Kid Only)'); set(l,'fontsize',10); 

subplot(224); hold all; 
bar(driveMetrics.movingTimeKidNorm(:,3),'facecolor',red);
errorbar(driveMetrics.movingTimeKidNorm(:,3),driveMetrics.movingTimeKidNorm(:,4),'k.')
ylabel('% of Session');
set(gca,'xtick',1:12); xlabel('Visit'); ylim([0,1]);
l= legend('Moving Time (Kid Only)'); set(l,'fontsize',10); 

end
%% Plotting time-based Driving Metrics (by Session)
if plotting == 1
figure; hold all; set(gcf,'name',[subID ': Driving Metrics (Time) by Session']); 
subplot(221); hold all;
title('Joystick Active Time'); 
ylabel('Time (min)'); set(gca,'xtick',1:12); xlabel('Visit');
b1 = bar(driveMetrics.activeTimeKid(:,1:2),'barwidth',1); 
b1(2).FaceColor = [0.7 0.8 0.9];
l = legend('S1','S2'); set(l,'location','northwest');  

subplot(222); hold all;
title('Moving Time')
ylabel('Time (min)'); set(gca,'xtick',1:12); xlabel('Visit');
b2 = bar(driveMetrics.movingTimeKid(:,1:2),'barwidth',1); 
b2(1).FaceColor = [0.9 0.3 0.1];
b2(2).FaceColor = [1.0 0.8 0.8];    
l = legend('S1','S2'); set(l,'location','northwest');  

subplot(212); hold all;
ylabel('Time (min)'); title('Average S1/S2')
bar([driveMetrics.activeTimeKid(:,3), driveMetrics.movingTimeKid(:,3)],'barwidth',1); 
errorbar((1:12)-0.15, driveMetrics.activeTimeKid(:,3), driveMetrics.activeTimeKid(:,4),'.','color',[0, 0.4, 0.7])
errorbar((1:12)+0.15, driveMetrics.movingTimeKid(:,3), driveMetrics.movingTimeKid(:,4),'.','color',[0.9 0.3 0.1])
set(gca,'xtick',1:12); xlabel('Visit'); 
legend('Joystick Active (Kid Only)','Moving (Kid Only)','',''); 

end

%% Calculating Path Length for Wheel Displacement = Distance Traveled
%%%% pathLengthR = sum of absolute value of wheel displacement for right wheel (kid only)
%%%% pathLengthL = sum of absolute value of wheel displacement for left wheel (kid only)
%%%% pathLengthAvg = average of R and L wheels

signals = {'pathLengthL','pathLengthR','pathLengthAvg','pathLengthAvg_Norm'}; 
pathMetrics = table();
for si = 1:length(signals)
    pathMetrics.(signals{si}) = nan(12,2);
end


for i = 1:length(visits)
    sessions = fields(Data.(subID).(visits{i}));
    ii = visitInd(i); 
    for j = 1:length(sessions) % sessions (S1, S2)
        if strcmp(sessions{j},'S1')
            jj = 1;
        else
            jj = 2;
        end

        diffListR = diff(dispData{ii,jj}.dispRKid); % add up the absolute value of the differences between points for path length
        diffListL = diff(dispData{ii,jj}.dispLKid);
        diffAllRealR = diffListR(~isnan(diffListR));
        diffAllRealL = diffListL(~isnan(diffListL));

       % removes the large differences from the connection of two files
       % together 
        filterR = diffAllRealL > 0.5 | diffAllRealL < -0.5;
        filterL = diffAllRealR > 0.5 | diffAllRealR < -0.5;
        diffAllRealR = diffAllRealR(~filterR);
        diffAllRealL = diffAllRealL(~filterL);
        pathMetrics.pathLengthR(ii,jj) = sum(abs(diffAllRealR));
        pathMetrics.pathLengthL(ii,jj) = sum(abs(diffAllRealL));
        pathMetrics.pathLengthAvg(ii,jj) = (pathMetrics.pathLengthR(ii,jj) + pathMetrics.pathLengthL(ii,jj))/2;
        pathMetrics.pathLengthAvg_Norm(ii,jj) = pathMetrics.pathLengthAvg(ii,jj)./driveMetrics.sessionTime(ii,jj); 

    end
end

pathMetricsKey = {'S1','S2','mean','std'}; % mean and std are calculated across sessions
metrics = pathMetrics.Properties.VariableNames;  
for i = 1:length(metrics)
    pathMetrics.(metrics{i})(:,3) = mean(pathMetrics.(metrics{i})(:,1:2),2,'omitnan');
    pathMetrics.(metrics{i})(:,4) = std(pathMetrics.(metrics{i})(:,1:2),0,2,'omitnan');
end

%% Calculating distance traveled

signals = {'distForward', 'distTurning', 'distBackward','distTotal',...
            };
l = 0.406; 
distMetrics = table();
for si = 1:length(signals)
    distMetrics.(signals{si}) = nan(12,2);
end

distForward = cell(12,2); 
distTurning = cell(12,2); 
distBackward = cell(12,2); 
distTotal = cell(12,2); 

for i = 1:length(visits)
    sessions = fields(Data.(subID).(visits{i}));
    ii = visitInd(i);
    for j = 1:length(sessions) % sessions (S1, S2)
        if strcmp(sessions{j},'S1')
            jj = 1; 
        else
            jj = 2; 
        end

        % pull from data structure
        joyKid = joyData{ii,jj}.joyKid; 
        velKid = velData{ii,jj}.velKid; 

    end
end



%% Processing & Arranging Driving Bouts
%%%%%%%%%%%%%%% ALL PROCESSED WITH KID DATA ONLY -- ADULT DATA REMOVED %%%%%%%%%%%%%%%
%%%% Outcomes: 
%%%% joyCount = number of joystick activation bouts per driving session
%%%% joyCount_lowVel = number of joystick activation bouts that resulted in EM movement (vel > 0)
%%%% joyCount_lowJoy = number of joystick activation bouts that had max joystick value of >7
%%%% joyMeanDur = mean duration of joystick activation bouts per driving session
%%%% joyMeanDur_lowVel = mean duration of joystick activation bouts that resulted in EM movement (vel > 0)
%%%% joyMeanDur_lowJoy = mean duration of joystick activation bouts that had max joystick value of >7
%%%% joyMaxDur = max duration of joystick activation bouts per driving session
%%%% joyMaxDur_lowVel = max duration of joystick activation bouts that resulted in EM movement (vel > 0)
%%%% joyMaxDur_lowJoy = max duration of joystick activation bouts that had max joystick value of >7
%%%% joyMinDur = min duration of joystick activation bouts per driving session
%%%% joyMinDur_lowVel = min duration of joystick activation bouts that resulted in EM movement (vel > 0)
%%%% joyMinDur_lowJoy = min duration of joystick activation bouts that had max joystick value of >7

%%%% joyBoutInd = indices of all joystick activation bouts that meet 
%                 criteria (boutStart = 0 for >100 ms, then not zero; boutEnd = not zero, then 0 for >100ms)
%%%% joyBoutDur = duration of time for each activation bout
%%%% joyBoutInd_lowJoy = indices of all joystick activation bouts that meet bout criteria AND have magnitude of joyKid > 7
%%%% joyBoutDur_lowJoy = duration of time for each activation bout
%%%% joyBoutInd_lowVel = indices of all joystick activation bouts that meet bout criteria AND have mean wheel velocity during bout > 0 (i.e., moving)
%%%% joyBoutDur_lowVel = duration of time for each activation bout
%%%% moveBoutInd = indices of movement bouts that meet  
%                  criteria (boutStart = 0 for >100 ms, then not zero; boutEnd = not zero, then 0 for >100ms)
%%%% moveBoutDur =  duration of time for each movement bout

clearvars velL velR joyX joyY joyXKid joyYKid velRKid velLKid joyKid velKid

signals = {'joyCount', 'joyCount_lowVel', 'joyCount_noVel',...
            'joyMeanDur','joyMinDur','joyMaxDur', ...
            'joyMeanDur_lowVel','joyMinDur_lowVel','joyMaxDur_lowVel', ...
            'joyMeanDur_noVel','joyMinDur_noVel','joyMaxDur_noVel',...
            'moveCount','moveMeanDur','moveMinDur','moveMaxDur',...
            'perJoy_1s','perJoy_2s','perMove_1s','perMove_2s','perJoy_lowVel','moveDelayMeanDur',...
            'joyBoutVelMean','joyBoutAbsVelMean','joyBoutVelPosMax','joyBoutVelNegMax','joyBoutAbsVelMax',...
            'joyBoutVelMean_lowVel','joyBoutAbsVelMean_lowVel','joyBoutVelPosMax_lowVel','joyBoutVelNegMax_lowVel','joyBoutAbsVelMax_lowVel',...
            'moveBoutVelMean','moveBoutAbsVelMean','moveBoutVelPosMax','moveBoutVelNegMax','moveBoutAbsVelMax','moveBoutAbsVelMax_Norm','moveBoutAbsVelMean_Norm',...
            'joyCount_Norm','moveCount_Norm'};

%             'joyMeanDur_lowJoy','joyMinDur_lowJoy','joyMaxDur_lowJoy', ...

driveBouts = table();
for si = 1:length(signals)
    driveBouts.(signals{si}) = nan(12,2);
end

joyBoutInd = cell(12,2); 
joyBoutDur_All = cell(12,2); 
joyBoutInd_lowJoy = cell(12,2); 
joyBoutDur_lowJoy = cell(12,2); 
joyBoutInd_lowVel = cell(12,2);  
joyBoutDur_lowVel_All = cell(12,2);
joyBoutDur_noVel_All = cell(12,2); 
joyBoutVel_All = cell(12,2); 
joyBoutAbsVel_All = cell(12,2); 
joyBoutVelPos_All = cell(12,2);
joyBoutVelNeg_All = cell(12,2);
joyBoutAbsVelMax_All = cell(12,2);
joyBoutVel_lowVel_All = cell(12,2); 
joyBoutAbsVel_lowVel_All = cell(12,2); 
joyBoutVelPos_lowVel_All = cell(12,2);
joyBoutVelNeg_lowVel_All = cell(12,2);
joyBoutAbsVelMax_lowVel_All = cell(12,2);
moveBoutInd = cell(12,2); 
moveBoutDur_All = cell(12,2);
moveDelayDur_All = cell(12,2); 
moveBoutVel_All = cell(12,2); 
moveBoutAbsVel_All = cell(12,2); 
moveBoutVelPos_All = cell(12,2); 
moveBoutVelNeg_All = cell(12,2); 
moveBoutAbsVelMax_All = cell(12,2); 
joyBoutInd_lowVel_i = cell(12,2); 


for i = 1:length(visits)
    sessions = fields(Data.(subID).(visits{i}));
    ii = visitInd(i);
    for j = 1:length(sessions) % sessions (S1, S2)
        if strcmp(sessions{j},'S1')
            jj = 1; 
        else
            jj = 2; 
        end

        % pull from data structure
        joyKid = joyData{ii,jj}.joyKid; 
        velKid = velData{ii,jj}.velKid; 

        % loop through samples of joystick to identify joystick bouts based
        % on joystick activation 
        pauseLen = 0.1; % require joystick = 0 for 100 ms to consider a break
        pauseFrames = pauseLen * 120; 
        boutInd = []; 
        onFrame = find(joyKid~=0,1); % first frame the joystick is active
        nBoutStart = 1; 
        if onFrame < pauseFrames && onFrame ~= 1 % if the first joystick activation is < 100 ms from start
            boutInd(nBoutStart,1) = onFrame;
            nBoutStart = nBoutStart+1;
        elseif onFrame == 1 % if the file starts with the joystick active
            boutInd(nBoutStart,1) = 2;
            nBoutStart = nBoutStart+1; 
        end

        for s = pauseFrames+1:length(joyKid)
            if joyKid(s-pauseFrames:s-1) == 0 & joyKid(s) ~= 0
                boutInd(nBoutStart,1) = s;
                nBoutStart = nBoutStart + 1;
            end
        end

        nBoutEnd = 1; 
        for s = 1:length(joyKid)-(pauseFrames+1)
            if joyKid(s)~=0 & joyKid(s+1:s+pauseFrames) == 0
                boutInd(nBoutEnd,2) = s; 
                nBoutEnd = nBoutEnd + 1; 
            end
        end

        if nBoutEnd < nBoutStart     % if file ends with joystick active
            boutInd(nBoutEnd,2) = length(joyKid); 
        end     

        boutInd(:,1) = boutInd(:,1)-1; 

        joyBoutInd{ii,jj} = boutInd;
        joyBoutDur_All{ii,jj} = (boutInd(:,2)-boutInd(:,1))./sampFreq; 
        driveBouts.joyCount(ii,jj) = length(boutInd);
        driveBouts.joyCount_Norm(ii,jj) = length(boutInd)./driveMetrics.sessionTime(ii,jj); 
        driveBouts.joyMeanDur(ii,jj) = mean((boutInd(:,2)-boutInd(:,1))./sampFreq);
        driveBouts.joyMinDur(ii,jj) = min((boutInd(:,2)-boutInd(:,1))./sampFreq);
        driveBouts.joyMaxDur(ii,jj) = max((boutInd(:,2)-boutInd(:,1))./sampFreq);
    
        % calculate the max value of the joystick during the bout
        meanJoy = zeros(length(joyKid),1);
        mJoy = zeros(length(boutInd),1);
        for s = 1:size(boutInd,1)
            mJoy(s) = max(joyKid(boutInd(s,1):boutInd(s,2)));
            meanJoy(boutInd(s,1):boutInd(s,2)) = mean(joyKid(boutInd(s,1):boutInd(s,2)));
        end
        
        % eliminate joystick bouts where the max joystick value is < 7
        boutInd_lowJoy = boutInd(mJoy>7,:);
        joyBoutInd_lowJoy{ii,jj} = boutInd_lowJoy;
        joyBoutDur_lowJoy{ii,jj} = (boutInd_lowJoy(:,2)-boutInd_lowJoy(:,1))./sampFreq;
        driveBouts.joyCount_lowJoy(ii,jj) = length(boutInd_lowJoy);
        driveBouts.joyMeanDur_lowJoy(ii,jj) = mean((boutInd_lowJoy(:,2)-boutInd_lowJoy(:,1))./sampFreq);
        driveBouts.joyMinDur_lowJoy(ii,jj) = min((boutInd_lowJoy(:,2)-boutInd_lowJoy(:,1))./sampFreq);
        driveBouts.joyMaxDur_lowJoy(ii,jj) = max((boutInd_lowJoy(:,2)-boutInd_lowJoy(:,1))./sampFreq);

        % calculate the mean value of the wheel velocity during the bout
        meanVel = zeros(length(joyKid),1);
        mVel = zeros(length(boutInd),1);
        joyBoutVel_s = zeros(length(boutInd),1);
        joyBoutAbsVel_s = zeros(length(boutInd),1);
        joyBoutVelPos_s = zeros(length(boutInd),1);
        joyBoutVelNeg_s = zeros(length(boutInd),1);
        joyBoutAbsVelMax_s = zeros(length(boutInd),1);
        for s = 1:size(boutInd,1)
            mVel(s,1) = mean(velKid(boutInd(s,1):boutInd(s,2)));
            meanVel(boutInd(s,1):boutInd(s,2)) = mean(velKid(boutInd(s,1):boutInd(s,2)));
            joyBoutVel_s(s,1) = mean(velData{ii,jj}.v(boutInd(s,1):boutInd(s,2))); 
            joyBoutAbsVel_s(s,1) = mean(abs(velData{ii,jj}.v(boutInd(s,1):boutInd(s,2)))); 
            joyBoutVelPos_s(s,1) = max(velData{ii,jj}.v(boutInd(s,1):boutInd(s,2)));
            joyBoutVelNeg_s(s,1) = min(velData{ii,jj}.v(boutInd(s,1):boutInd(s,2)));
            joyBoutAbsVelMax_s(s,1) = max(abs(velData{ii,jj}.v(boutInd(s,1):boutInd(s,2)))); 
        end

        joyBoutVel_All{ii,jj} = joyBoutVel_s; 
        joyBoutAbsVel_All{ii,jj} = joyBoutAbsVel_s; 
        joyBoutVelPos_All{ii,jj} = joyBoutVelPos_s; 
        joyBoutVelNeg_All{ii,jj} = joyBoutVelNeg_s; 
        joyBoutAbsVelMax_All{ii,jj} = joyBoutAbsVelMax_s; 

        driveBouts.joyBoutVelMean(ii,jj) = mean(joyBoutVel_All{ii,jj}); 
        driveBouts.joyBoutAbsVelMean(ii,jj) = mean(joyBoutAbsVel_All{ii,jj});
        driveBouts.joyBoutVelPosMax(ii,jj) = mean(joyBoutVelPos_All{ii,jj}); 
        driveBouts.joyBoutVelNegMax(ii,jj) = mean(joyBoutVelNeg_All{ii,jj}); 
        driveBouts.joyBoutAbsVelMax(ii,jj) = mean(joyBoutAbsVelMax_All{ii,jj}); 

        joyBoutVel_lowVel_All{ii,jj} = joyBoutVel_All{ii,jj}(mVel>0); 
        joyBoutAbsVel_lowVel_All{ii,jj} = joyBoutAbsVel_All{ii,jj}(mVel>0); 
        joyBoutVelPos_lowVel_All{ii,jj} = joyBoutVelPos_All{ii,jj}(mVel>0); 
        joyBoutVelNeg_lowVel_All{ii,jj} = joyBoutVelNeg_All{ii,jj}(mVel>0); 
        joyBoutAbsVelMax_lowVel_All{ii,jj} = joyBoutAbsVelMax_All{ii,jj}(mVel>0); 

        driveBouts.joyBoutVelMean_lowVel(ii,jj) = mean(joyBoutVel_lowVel_All{ii,jj}); 
        driveBouts.joyBoutAbsVelMean_lowVel(ii,jj) = mean(joyBoutAbsVel_lowVel_All{ii,jj});
        driveBouts.joyBoutVelPosMax_lowVel(ii,jj) = mean(joyBoutVelPos_lowVel_All{ii,jj}); 
        driveBouts.joyBoutVelNegMax_lowVel(ii,jj) = mean(joyBoutVelNeg_lowVel_All{ii,jj}); 
        driveBouts.joyBoutAbsVelMax_lowVel(ii,jj) = mean(joyBoutAbsVelMax_lowVel_All{ii,jj}); 

        
        % eliminate joystick bouts where the max velocity value is 0
        boutInd_lowVel = boutInd(mVel>0,:);
        boutInd_lowVel_i = mVel>0;
        if ~isempty(boutInd_lowVel)
            joyBoutInd_lowVel{ii,jj} = boutInd_lowVel;
            joyBoutInd_lowVel_i{ii,jj} = boutInd_lowVel_i; 
            joyBoutDur_lowVel_All{ii,jj} = (boutInd_lowVel(:,2)-boutInd_lowVel(:,1))./sampFreq;
            
            driveBouts.joyCount_lowVel(ii,jj) = length(boutInd_lowVel);
            driveBouts.joyCount_noVel(ii,jj) = length(boutInd(boutInd_lowVel_i==0));
            driveBouts.joyMeanDur_lowVel(ii,jj) = mean((boutInd_lowVel(:,2)-boutInd_lowVel(:,1))./sampFreq);
            driveBouts.joyMeanDur_noVel(ii,jj) = mean((boutInd(boutInd_lowVel_i==0,2)-boutInd(boutInd_lowVel_i==0,1))./sampFreq); 
            driveBouts.joyMinDur_lowVel(ii,jj) = min((boutInd_lowVel(:,2)-boutInd_lowVel(:,1))./sampFreq);
            driveBouts.joyMinDur_noVel(ii,jj) = min((boutInd(boutInd_lowVel_i==0,2)-boutInd(boutInd_lowVel_i==0,1))./sampFreq);
            driveBouts.joyMaxDur_lowVel(ii,jj) = max((boutInd_lowVel(:,2)-boutInd_lowVel(:,1))./sampFreq);
            driveBouts.joyMaxDur_noVel(ii,jj) = max((boutInd(boutInd_lowVel_i==0,2)-boutInd(boutInd_lowVel_i==0,1))./sampFreq);

        end

        % calculate % of joystick bouts < 1s and 2s
        if ~isempty(joyBoutDur_All{ii,jj})
            [count_1s, ~] = histcounts(joyBoutDur_All{ii,jj},0:1:max(joyBoutDur_All{ii,jj}));
            driveBouts.perJoy_1s(ii,jj) = count_1s(1)./length(joyBoutDur_All{ii,jj}); % percent of all bouts < 1s
            [count_2s, ~] = histcounts(joyBoutDur_All{ii,jj},0:2:max(joyBoutDur_All{ii,jj}));
            driveBouts.perJoy_2s(ii,jj) = count_2s(1)./length(joyBoutDur_All{ii,jj}); % percent of all bouts < 2s
        end

        driveBouts.perJoy_lowVel(ii,jj) = length(boutInd_lowVel) / length(boutInd);

        % loop through samples of joystick to identify driving bouts based
        % on velocity
        pauseLen = 0.1; % require velocity = 0 for 100 ms to consider a break
        pauseFrames = pauseLen * 120; 
        moveInd = []; 
        onFrame = find(velKid~=0,1); % first frame the joystick is active
        nBoutStart = 1; 
        if onFrame < pauseFrames && onFrame ~= 1 % if the first movement is < 100 ms from start
            moveInd(nBoutStart,1) = onFrame;
            nBoutStart = nBoutStart+1;
        elseif onFrame == 1 % if the file starts with the joystick active
            moveInd(nBoutStart,1) = 1;
            nBoutStart = nBoutStart+1; 
        end

        for s = pauseFrames+1:length(velKid)
            if velKid(s-pauseFrames:s-1) == 0 & velKid(s) ~= 0 
                moveInd(nBoutStart,1) = s;
                nBoutStart = nBoutStart + 1;
            end
        end

        nBoutEnd = 1; 
        for s = 1:length(velKid)-(pauseFrames+1)
            if velKid(s)~=0 & velKid(s+1:s+pauseFrames) == 0
                moveInd(nBoutEnd,2) = s; 
                nBoutEnd = nBoutEnd + 1; 
            end
        end

        if nBoutEnd < nBoutStart     % if file ends with joystick active
            moveInd(nBoutEnd,2) = length(velKid); 
        end 

        if ~isempty(find(moveInd(:,1)==moveInd(:,2)))
            indRemove = find(moveInd(:,1)==moveInd(:,2));
            moveInd(indRemove,:) = []; 
        end

        moveBoutInd{ii,jj} = moveInd;
        moveBoutDur_All{ii,jj} = (moveInd(:,2)-moveInd(:,1))./sampFreq;
        driveBouts.moveCount(ii,jj) = length(moveInd);
        driveBouts.moveCount_Norm(ii,jj) = length(moveInd)./driveMetrics.sessionTime(ii,jj); 
        driveBouts.moveMeanDur(ii,jj) = mean((moveInd(:,2)-moveInd(:,1))./sampFreq);
        driveBouts.moveMinDur(ii,jj) = min((moveInd(:,2)-moveInd(:,1))./sampFreq);
        driveBouts.moveMaxDur(ii,jj) = max((moveInd(:,2)-moveInd(:,1))./sampFreq);


        % calculate the mean and max value of the wheel velocity during the movement bout
        mVel = zeros(length(moveInd),1);
        moveBoutVel_s = zeros(length(moveInd),1);
        moveBoutAbsVel_s = zeros(length(moveInd),1);
        moveBoutVelPos_s = zeros(length(moveInd),1);
        moveBoutVelNeg_s = zeros(length(moveInd),1);
        moveBoutAbsVelMax_s = zeros(length(moveInd),1);
        for s = 1:size(moveInd,1)
            mVel(s,1) = mean(velKid(moveInd(s,1):moveInd(s,2)));
            moveBoutVel_s(s,1) = mean(velData{ii,jj}.v(moveInd(s,1):moveInd(s,2))); 
            moveBoutAbsVel_s(s,1) = mean(abs(velData{ii,jj}.v(moveInd(s,1):moveInd(s,2)))); 
            moveBoutVelPos_s(s,1) = max(velData{ii,jj}.v(moveInd(s,1):moveInd(s,2)));
            moveBoutVelNeg_s(s,1) = min(velData{ii,jj}.v(moveInd(s,1):moveInd(s,2)));
            moveBoutAbsVelMax_s(s,1) = max(abs(velData{ii,jj}.v(moveInd(s,1):moveInd(s,2)))); 

        end
        
        moveBoutVel_All{ii,jj} = moveBoutVel_s; 
        moveBoutAbsVel_All{ii,jj} = moveBoutAbsVel_s; 
        moveBoutVelPos_All{ii,jj} = moveBoutVelPos_s;
        moveBoutVelNeg_All{ii,jj} = moveBoutVelNeg_s;
        moveBoutAbsVelMax_All{ii,jj} = moveBoutAbsVelMax_s; 

        driveBouts.moveBoutVelMean(ii,jj) = mean(moveBoutVel_All{ii,jj}); 
        driveBouts.moveBoutAbsVelMean(ii,jj) = mean(moveBoutAbsVel_All{ii,jj}); 
        driveBouts.moveBoutVelPosMax(ii,jj) = mean(moveBoutVelPos_All{ii,jj}); 
        driveBouts.moveBoutVelNegMax(ii,jj) = mean(moveBoutVelNeg_All{ii,jj}); 
        driveBouts.moveBoutAbsVelMax(ii,jj) = mean(moveBoutAbsVelMax_All{ii,jj}); 
        driveBouts.moveBoutAbsVelMax_Norm(ii,jj) = mean(moveBoutAbsVelMax_All{ii,jj})./speedVals(ii,jj);
        driveBouts.moveBoutAbsVelMean_Norm(ii,jj) = mean(moveBoutAbsVel_All{ii,jj})./speedVals(ii,jj); 

        % calculate % of movement bouts < 1s and 2s
        if~isempty(moveBoutDur_All{ii,jj})
            [count_1s, ~] = histcounts(moveBoutDur_All{ii,jj},0:1:max(moveBoutDur_All{ii,jj}));
            driveBouts.perMove_1s(ii,jj) = count_1s(1)./length(moveBoutDur_All{ii,jj}); % percent of all bouts < 1s
            if max(moveBoutDur_All{ii,jj})<2
                count_2s = 0; 
            else
                [count_2s, ~] = histcounts(moveBoutDur_All{ii,jj},0:2:max(moveBoutDur_All{ii,jj}));
            end
            driveBouts.perMove_2s(ii,jj) = count_2s(1)./length(moveBoutDur_All{ii,jj}); % percent of all bouts < 2s
        end
    
        min_i = []; min_y = []; 
        for m = 1:length(moveBoutInd{ii,jj})
            [min_y(m), min_i(m)] = min(abs(joyBoutInd{ii,jj}(:,1)-moveBoutInd{ii,jj}(m,1)));
            if joyBoutInd{ii,jj}(min_i(m),1) - moveBoutInd{ii,jj}(m,1) > 0
                min_i(m) = min_i(m)-1;
            end
        end

        [c, ia] = unique(min_i);
%         for k = 1:length(c)
%             figure(1000);
%             plot(joyBoutInd{1,1}(c(k),1):joyBoutInd{1,1}(c(k),2),joyData{1,1}.joyKid(joyBoutInd{1,1}(c(k),1):joyBoutInd{1,1}(c(k),2)));
%             hold all; plot(moveBoutInd{1,1}(ia(k),1):moveBoutInd{1,1}(ia(k),2), velData{1,1}.velKid(moveBoutInd{1,1}(ia(k),1):moveBoutInd{1,1}(ia(k),2))*100);
%             hold off;
%             pause;
%         end

        moveDelayDur{ii,jj} = (moveBoutInd{ii,jj}(ia,1) - joyBoutInd{ii,jj}(c,1));
        driveBouts.moveDelayMeanDur(ii,jj) = mean(moveDelayDur{ii,jj});

    end
end

driveBoutsKey = {'S1','S2','mean','std'}; % mean and std are calculated across sessions
metrics = driveBouts.Properties.VariableNames;  
for i = 1:length(metrics)
    driveBouts.(metrics{i})(:,3) = mean(driveBouts.(metrics{i})(:,1:2),2,'omitnan');
    driveBouts.(metrics{i})(:,4) = std(driveBouts.(metrics{i})(:,1:2),0,2,'omitnan');
end

%% Plotting Joystick Bout Metrics
if plotting == 1
figure; hold all; set(gcf,'name',[subID ': # Joystick Bouts & Percent Movement']); 
subplot(211); hold all; 
b = bar([driveBouts.joyCount(:,3), driveBouts.joyCount_lowJoy(:,3), driveBouts.joyCount_lowVel(:,3)],'barwidth',1);
b(2).FaceColor = medblue; 
b(3).FaceColor = ltblue; 
legend('All Joystick','No Joystick < 7','No Velocity = 0');
ylabel('# of Joy Activations'); set(gca,'xtick',1:12); xlabel('Visit');  box off; 

subplot(212); hold all; 
bar((driveBouts.joyCount_lowVel(:,3)./driveBouts.joyCount(:,3))*100); 
plot((driveBouts.joyCount_lowVel(:,1)./driveBouts.joyCount(:,1))*100,'ks','markerfacecolor','k'); 
plot((driveBouts.joyCount_lowVel(:,2)./driveBouts.joyCount(:,2))*100,'ko');
ylabel('% Joy Activations = Move'); set(gca,'xtick',1:12); xlabel('Visit');  box off; 
legend('','S1','S2'); 


figure; hold all;  set(gcf,'name',[subID ': Duration of Joystick Bouts']); 
subplot(221); hold all; 
bar(driveBouts.joyMeanDur(:,3)); 
plot(driveBouts.joyMeanDur(:,1),'ks','markerfacecolor','k'); 
plot(driveBouts.joyMeanDur(:,2),'ko');
legend('','S1','S2'); set(gca,'xtick',1:12); xlabel('Visit');  box off; 
ylabel('Mean Joystick Bout Duration (s)');

subplot(222); hold all; 
bar(driveBouts.joyMinDur(:,3)); 
plot(driveBouts.joyMinDur(:,1),'ks','markerfacecolor','k'); 
plot(driveBouts.joyMinDur(:,2),'ko');
legend('','S1','S2'); set(gca,'xtick',1:12); xlabel('Visit');  box off; 
ylabel('Min Joystick Bout Duration (s)');

subplot(223); hold all; 
bar(driveBouts.joyMaxDur(:,3)); 
plot(driveBouts.joyMaxDur(:,1),'ks','markerfacecolor','k'); 
plot(driveBouts.joyMaxDur(:,2),'ko');
legend('','S1','S2'); set(gca,'xtick',1:12); xlabel('Visit');  box off; 
ylabel('Max Joystick Bout Duration (s)');

subplot(224); hold all; 
b=bar([driveBouts.perJoy_1s(:,3), driveBouts.perJoy_2s(:,3)]); 
b(2).FaceColor = ltblue; 
plot((1:12)-0.15, driveBouts.perJoy_1s(:,1),'ks','markerfacecolor','k'); 
plot((1:12)-0.15,driveBouts.perJoy_1s(:,2),'ko');
plot((1:12)+0.15, driveBouts.perJoy_2s(:,1),'ks','markerfacecolor','k'); 
plot((1:12)+0.15,driveBouts.perJoy_2s(:,2),'ko');
legend('% < 1s','% < 2s','S1','S2','',''); set(gca,'xtick',1:12); xlabel('Visit');  box off; 
ylabel('% Joystick Bouts');

figure; hold all;  set(gcf,'name',[subID ': Duration of Movement Bouts']); 
subplot(221); hold all; 
bar(driveBouts.moveMeanDur(:,3),'facecolor',red); 
plot(driveBouts.moveMeanDur(:,1),'ks','markerfacecolor','k'); 
plot(driveBouts.moveMeanDur(:,2),'ko');
legend('','S1','S2'); set(gca,'xtick',1:12); xlabel('Visit');  box off; 
ylabel('Mean Movement Bout Duration (s)');

subplot(222); hold all; 
bar(driveBouts.moveMinDur(:,3),'facecolor',red); 
plot(driveBouts.moveMinDur(:,1),'ks','markerfacecolor','k'); 
plot(driveBouts.moveMinDur(:,2),'ko');
legend('','S1','S2'); set(gca,'xtick',1:12); xlabel('Visit');  box off; 
ylabel('Min Movement Bout Duration (s)');

subplot(223); hold all; 
bar(driveBouts.moveMaxDur(:,3),'facecolor',red); 
plot(driveBouts.moveMaxDur(:,1),'ks','markerfacecolor','k'); 
plot(driveBouts.moveMaxDur(:,2),'ko');
legend('','S1','S2'); set(gca,'xtick',1:12); xlabel('Visit');  box off; 
ylabel('Max Movemnt Bout Duration (s)');

subplot(224); hold all; 
b = bar([driveBouts.perMove_1s(:,3), driveBouts.perMove_2s(:,3)],'facecolor',red); 
b(2).FaceColor = ltred; 
plot((1:12)-0.15, driveBouts.perMove_1s(:,1),'ks','markerfacecolor','k'); 
plot((1:12)-0.15,driveBouts.perMove_1s(:,2),'ko');
plot((1:12)+0.15, driveBouts.perMove_2s(:,1),'ks','markerfacecolor','k'); 
plot((1:12)+0.15,driveBouts.perMove_2s(:,2),'ko');
legend('% < 1s','% < 2s','S1','S2','',''); set(gca,'xtick',1:12); xlabel('Visit');  box off; 
ylabel('% Movement Bouts');

end

%% Analyze distribution of bouts
% find maximum number of joystick bouts
% if plotting == 1
% cellLen = cellfun(@(x) length(x), joyBoutDur); 
% maxLen = max(sum(cellLen,2)); 
% boxData = nan(12,maxLen);
% for i = 1:length(visits)
%     visitData = [joyBoutDur{i,1}; joyBoutDur{i,2}]'; 
%     boxData(visitInd(i),1:length(visitData)) = visitData; 
% end  
% 
% figure; hold all; set(gcf,'name',[subID ': Distribution of Joystick Bouts (Pooled)']); 
% subplot(121); hold all; 
% boxchart(boxData');
% xlabel('Visit');  box off; ylabel('Joystick Bout Duration (s)')
% title('Distribution of Bouts')
% 
% % find maximum number of joystick bouts < minimum time
% minBoutTime = 2; 
% cellLen = cellfun(@(x) length(x), joyBoutDur); 
% maxLen = max(sum(cellLen,2)); 
% boxData = nan(12,maxLen);
% for i = 1:length(visits)
%     visitData = [joyBoutDur{i,1}(joyBoutDur{i,1}>minBoutTime,:); joyBoutDur{i,2}(joyBoutDur{i,2}>minBoutTime,:)]'; 
%     boxData(visitInd(i),1:length(visitData)) = visitData; 
% end
% 
% subplot(122); hold all; 
% boxchart(boxData');
% title(['Distribution of Bouts > ' num2str(minBoutTime) ' s'])
% xlabel('Visit');  box off; ylabel('Joystick Bout Duration (s)')
% 
% % find maximum number of movement bouts
% cellLen = cellfun(@(x) length(x), moveBoutDur); 
% maxLen = max(sum(cellLen,2)); 
% boxData = nan(12,maxLen);
% for i = 1:length(visits)
%     visitData = [moveBoutDur{i,1}; moveBoutDur{i,2}]'; 
%     boxData(visitInd(i),1:length(visitData)) = visitData; 
% end
% 
% figure; hold all; set(gcf,'name',[subID ': Distribution of Movement Bouts (Pooled)']); 
% subplot(121); hold all; 
% boxchart(boxData','boxfacecolor',red,'markercolor',red);
% xlabel('Visit');  box off; ylabel('Movement Bout Duration (s)')
% title('Distribution of Bouts')
% 
% % find maximum number of bouts
% minBoutTime = 2; 
% cellLen = cellfun(@(x) length(x), moveBoutDur); 
% maxLen = max(sum(cellLen,2)); 
% boxData = nan(12,maxLen);
% for i = 1:length(visits)
%     visitData = [moveBoutDur{i,1}(moveBoutDur{i,1}>minBoutTime,:); moveBoutDur{i,2}(moveBoutDur{i,2}>minBoutTime,:)]'; 
%     boxData(visitInd(i),1:length(visitData)) = visitData; 
% end
% 
% subplot(122); hold all; 
% boxchart(boxData','boxfacecolor',red,'markercolor',red);
% title(['Distribution of Bouts > ' num2str(minBoutTime) ' s'])
% xlabel('Visit');  box off; ylabel('Movement Bout Duration (s)')

% end
%% Calculate joystick direction
signals = {'angleRangeMean', 'angleRangeMin','angleRangeMax','angleRangeStd','angleRangeMed',...
    'angleRangeMean_lowVel', 'angleRangeMin_lowVel','angleRangeMax_lowVel','angleRangeStd_lowVel','angleRangeMed_lowVel'};
angleMetrics = table();
for si = 1:length(signals)
    angleMetrics.(signals{si}) = nan(12,2);
end
angleRangeAll = cell(12,2);
angleRangeAll_lowVel = cell(12,2); 
angleData = cell(12,2); 
angleData_lowVel = cell(12,2); 

signals = {'pathLenMean', 'pathLenMin','pathLenMax','pathLenStd','pathLenMed',...
                'perMaxMean','perMaxMin','perMaxMax','perMaxStd','perMaxMed','pathEfficiency'};
joyPathMetrics = table();
for si = 1:length(signals)
    joyPathMetrics.(signals{si}) = nan(12,2);
end
joyPathAll = cell(12,2); 
joyPathAll_lowVel = cell(12,2); 
perMaxAll = cell(12,2); 

for i = 1:length(visits)
    sessions = fields(Data.(subID).(visits{i}));
    ii = visitInd(i); 
    for j = 1:length(sessions) % sessions (S1, S2)
        if strcmp(sessions{j},'S1')
            jj = 1;
        else
            jj = 2;
        end

        joyKid = joyData{ii,jj}.joyKid;
        joyXKid = joyData{ii,jj}.joyXKid;
        joyYKid = joyData{ii,jj}.joyYKid;
        velKid = velData{ii,jj}.velKid;
        time = joyData{ii,jj}.time;

        %%% INCORRECT CALCULATIONS
%         diffDistR = [0; diff(dispData{ii,jj}.dispRKid)]; % add up the absolute value of the differences between points for path length
%         diffDistL = [0; diff(dispData{ii,jj}.dispLKid)];
%         diffDistR(abs(diffDistR)>0.5) = NaN;  % removes the large differences from the connection of two files together 
%         diffDistL(abs(diffDistL)>0.5) = NaN; 
%         diffDistAvg = (diffDistR + diffDistL) ./2; 
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        th = 0:pi/32:2*pi;
        dataChoices = {'joyBoutInd','joyBoutInd_lowVel'};
        pathLen_count = []; 
        pathLen_count_lowVel = []; 
        perMax = []; 
        perMax_lowVel = []; 
        for dC = 1:2 % repeat for all and lowVel conditions
            boutActiveInd_all = []; 
            if dC == 1
                dataChoice = joyBoutInd;  
                angleRange = nan(length(dataChoice{ii,jj}),1);
                edgeAngles = nan(length(dataChoice{ii,jj}),2);
            else
                dataChoice = joyBoutInd_lowVel;  
                angleRange_lowVel = nan(length(dataChoice{ii,jj}),1);
                edgeAngles_lowVel = nan(length(dataChoice{ii,jj}),2);
            end
            thresholdChoice = 10;     %%% change this radial threshold used to count a bout for angular analysis 
            
            for k = 1:length(dataChoice{ii,jj}) % iterate through bouts to calculate each angle 
                angleFrom0 = [];

                ind1 = dataChoice{ii,jj}(k,1);
                ind2 = dataChoice{ii,jj}(k,2);
                boutData_all = joyKid(ind1:ind2,:);
                boutDataX_all = joyXKid(ind1:ind2,:);
                boutDataY_all = joyYKid(ind1:ind2,:);
                boutTime_all = time(ind1:ind2,:); 
%                 distAvg = diffDistAvg(ind1:ind2,:); 
                boutActiveInd_all = [boutActiveInd_all; [ind1:ind2]'];

                % calculate % of bout where joystick is at its maximum (> 98.5)
                nPointsMax = length(find(boutData_all>=98.5));
                if dC == 1
                    perMax(k,1) = nPointsMax/length(boutData_all)*100; 
                else
                    perMax_lowVel(k,1) = nPointsMax/length(boutData_all)*100; 
                end

                % calculate joystick path length 
                pathLen = sqrt(diff(boutDataX_all).^2 + diff(boutDataY_all).^2);
                
                if dC == 1
                    pathLen_count(k,1) = sum(pathLen); 
                    %%% INCORRECT CALCULATIONS
%                     diffDistAvg_count(k,1) = sum(abs(distAvg)); 
%                     pathEfficiency(k,1) = pathLen_count(k,1)./diffDistAvg_count(k,1);     
                    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                else
                    pathLen_count_lowVel(k,1) = sum(pathLen); 
                    %%% INCORRECT CALCULATIONS
%                     diffDistAvg_count_lowVel(k,1) = sum(abs(distAvg)); 
%                     pathEfficiency_lowVel(k,1) = pathLen_count_lowVel(k,1)./diffDistAvg_count_lowVel(k,1); 
                    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                end


                % segregate just the times when the joystick is active outside of a radius of thresholdChoice
                boutDataX = boutDataX_all; boutDataY = boutDataY_all; boutTime = boutTime_all; boutData = boutData_all; 
                boutDataX(abs(boutDataX_all)<=thresholdChoice & abs(boutDataY_all)<=thresholdChoice) = [];
                boutDataY(abs(boutDataX_all)<=thresholdChoice & abs(boutDataY_all)<=thresholdChoice) = [];
                boutTime(abs(boutDataX_all)<=thresholdChoice & abs(boutDataY_all)<=thresholdChoice) = [];
                boutData(abs(boutDataX_all)<=thresholdChoice & abs(boutDataY_all)<=thresholdChoice) = [];
                if ~isempty(boutDataY) && ~isempty(boutDataX)
                    angleFrom0 = atan2d(boutDataY,boutDataX);  % calculate the angle from 0 for each data point
                    angleFrom0(angleFrom0 < 0) = angleFrom0(angleFrom0 < 0) + 360;   % constrain from 0 to 360 degrees
                    
                    [hC, edgs] = histcounts(angleFrom0,0:1:360);  % use a radial histogram with 1 degree increments to identify radial complexity 
                    hC2 = [hC, hC];
                    angles = [1:1:360, 1:1:360];
                    f_hC2 = find(hC2~=0);
                    d_hC2 = diff(f_hC2);
                    [m, max_i] = max(d_hC2);
                    f = find(d_hC2==m);
                    ang1 = f_hC2(f(1));
                    find(angles(angles>ang1));
                    ang2 = f_hC2(f(1)+1);
                    edgeAngle1 = angles(ang1);
                    edgeAngle2 = angles(ang2)-1;
                    angleRange_k = edgeAngle2-edgeAngle1;
                    if angleRange_k >= 0
                        angleRange_k = 360-angleRange_k;
                    else
                        angleRange_k = -angleRange_k;
                    end

                    if dC == 1
                        angleRange(k) = angleRange_k;
                        edgeAngles(k,:) = [edgeAngle1 edgeAngle2]; 
                    else
                        angleRange_lowVel(k) = angleRange_k;
                        edgeAngles_lowVel(k,:) = [edgeAngle1 edgeAngle2];
                    end

%                    
%                     figure(9999 + subj); hold all;
%                     th = linspace(0,2*pi,500);
%                     x = cos(th);
%                     y = sin(th);
%                     plot(x,y,'k'); xlim([-100,100]); ylim([-100,100]); 
%                     fill([0,100*cosd(edgeAngles(k,1)),100*cosd(edgeAngles(k,2))],[0,100*sind(edgeAngles(k,1)),100*sind(edgeAngles(k,2))],colors{subj,:},'facealpha',0.1,'EdgeColor','none');


                %%%%%%%%%%%%%%%%%% POLAR HISTOGRAMS FOR INDIVIDUAL BOUTS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 figure(9999+k);        
%                 subplot(221);
%                 plot(boutDataX,boutDataY); xline([-100,100]); yline([-100 100]); ylim([-100 100]); xlim([-100 100]);
%                 hold on
%                 title(['Angle Range = ' num2str(round(angleRange_k,0))]);
%                 plot(cos(th)*thresholdChoice,sin(th)*thresholdChoice,'k'); plot(cos(th)*100,sin(th)*100,'k');
%                 plot([0, cosd(edgeAngle1)*100],[0, sind(edgeAngle1)*100],'k--');
%                 plot([0, cosd(edgeAngle2)*100],[0, sind(edgeAngle2)*100],'k:');
%                 hold off;
%                 axis square;

%                 subplot(222);
%                 polarhistogram(deg2rad(angleFrom0),'BinEdges',(0:30:360)*pi/180);
%                 set(gca,'rtick',[]);

%                 subplot(223);
%                 histogram(joyDir,0:1:7); title(num2str(k))
%                 set(gca,'xtick',1.5:1:7.5,'xticklabel',{'F','FL','FR','B','BL','BR'})
%                 set(gca,'ytick',[]);
%                 pause; 
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                end
            end   

            if dC == 1
                boutActiveInd = boutActiveInd_all; 
            else
                boutActiveInd_lowVel = boutActiveInd_all; 
            end

        end

        joyPathMetrics.pathLenMean(ii,jj) = mean(pathLen_count,'omitnan');
        joyPathMetrics.pathLenMed(ii,jj) = median(pathLen_count,'omitnan');
        joyPathMetrics.pathLenMin(ii,jj) = min(pathLen_count);
        joyPathMetrics.pathLenMax(ii,jj) = max(pathLen_count);
        joyPathMetrics.pathLenStd(ii,jj) = std(pathLen_count,'omitnan');
        joyPathAll{ii,jj} = pathLen_count; 

        joyPathMetrics.pathEfficiency(ii,jj) = pathMetrics.pathLengthAvg(ii,jj)./joyPathMetrics.pathLenMean(ii,jj); 

%%%%%%%%%%%%% INCORRECT CALCULATIONS
%         joyPathMetrics.diffDistAvgMean(ii,jj) = mean(diffDistAvg_count,'omitnan'); 
%         joyPathMetrics.diffDistAvgMean_lowVel(ii,jj) = mean(diffDistAvg_count_lowVel,'omitnan'); 
%         joyPathMetrics.pathEfficiency(ii,jj) = mean(pathEfficiency,'omitnan'); 
%         joyPathMetrics.pathEfficiency_lowVel(ii,jj) = mean(pathEfficiency_lowVel,'omitnan'); 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        joyPathMetrics.pathLenMean_lowVel(ii,jj) = mean(pathLen_count_lowVel,'omitnan');
        joyPathMetrics.pathLenMed_lowVel(ii,jj) = median(pathLen_count_lowVel,'omitnan');
        joyPathMetrics.pathLenMin_lowVel(ii,jj) = min(pathLen_count_lowVel);
        joyPathMetrics.pathLenMax_lowVel(ii,jj) = max(pathLen_count_lowVel);
        joyPathMetrics.pathLenStd_lowVel(ii,jj) = std(pathLen_count_lowVel,'omitnan');
        joyPathAll_lowVel{ii,jj} = pathLen_count_lowVel; 

        joyPathMetrics.perMaxMean(ii,jj) = mean(perMax,'omitnan');
        joyPathMetrics.perMaxMed(ii,jj) = median(perMax,'omitnan');
        joyPathMetrics.perMaxMin(ii,jj) = min(perMax);
        joyPathMetrics.perMaxMax(ii,jj) = max(perMax);
        joyPathMetrics.perMaxStd(ii,jj) = std(perMax,'omitnan');
        perMaxAll{ii,jj} = perMax; 

        angleMetrics.angleRangeMean(ii,jj) = mean(angleRange,'omitnan');
        angleMetrics.angleRangeMed(ii,jj) = median(angleRange,'omitnan');
        angleMetrics.angleRangeMin(ii,jj) = min(angleRange);
        angleMetrics.angleRangeMax(ii,jj) = max(angleRange);
        angleMetrics.angleRangeStd(ii,jj) = std(angleRange,'omitnan');
        angleRangeAll{ii,jj} = angleRange;

        angleMetrics.angleRangeMean_lowVel(ii,jj) = mean(angleRange_lowVel,'omitnan');
        angleMetrics.angleRangeMed_lowVel(ii,jj) = median(angleRange_lowVel,'omitnan');
        angleMetrics.angleRangeMin_lowVel(ii,jj) = min(angleRange_lowVel);
        angleMetrics.angleRangeMax_lowVel(ii,jj) = max(angleRange_lowVel);
        angleMetrics.angleRangeStd_lowVel(ii,jj) = std(angleRange_lowVel,'omitnan');
        angleRangeAll_lowVel{ii,jj} = angleRange_lowVel;

        % calculate angle from [0,360] where 0 is the positive x axis and
        % positive theta is counterclockwise.
        angleFrom0 = atan2d(joyYKid(boutActiveInd),joyXKid(boutActiveInd));
        angleFrom0(angleFrom0 < 0) = angleFrom0(angleFrom0 < 0) + 360;
        angleFrom0_lowVel = atan2d(joyYKid(boutActiveInd_lowVel),joyXKid(boutActiveInd_lowVel));
        angleFrom0_lowVel(angleFrom0_lowVel < 0) = angleFrom0_lowVel(angleFrom0_lowVel < 0) + 360;
        % assign directional label to each of 6 segments, defined counterclockwise from foward.
        % 1 = forward, 2 = forward left, 3 = backward left, 4 = backward, 5 = backward right, 6 = forward right;
        joyDir = zeros(length(angleFrom0),1);
        for a = 1:length(angleFrom0)
            if angleFrom0(a) >= 60 && angleFrom0(a) < 120
                joyDir(a) = 1;
            elseif angleFrom0(a) >= 120 && angleFrom0(a) < 180
                joyDir(a) = 2;
            elseif angleFrom0(a) >= 180 && angleFrom0(a) < 240
                joyDir(a) = 3;
            elseif angleFrom0(a) >= 240 && angleFrom0(a) < 300
                joyDir(a) = 4;
            elseif angleFrom0(a) >= 300 && angleFrom0(a) <=360
                joyDir(a) = 5;
            elseif angleFrom0(a) >= 0 && angleFrom0(a) < 60
                joyDir(a) = 6;
            end
        end

        % assign directional label to each of 6 segments, defined counterclockwise from foward.
        % 11 = forward, 12 = forward left, 13 = left, 14 = backward left, 15 = backward, 16 = backward right, 17 = right, 18 = forward right;
        joyDir_8 = zeros(length(angleFrom0),1);
        for a = 1:length(angleFrom0)
            if angleFrom0(a) >= 67.5 && angleFrom0(a) < 112.5
                joyDir_8(a) = 11;
            elseif angleFrom0(a) >= 112.5 && angleFrom0(a) < 157.5
                joyDir_8(a) = 12;
            elseif angleFrom0(a) >= 157.5 && angleFrom0(a) < 202.5
                joyDir_8(a) = 13;
            elseif angleFrom0(a) >= 202.5 && angleFrom0(a) < 247.5
                joyDir_8(a) = 14;
            elseif angleFrom0(a) >= 247.5 && angleFrom0(a) < 292.5
                joyDir_8(a) = 15;
            elseif angleFrom0(a) >= 292.5 && angleFrom0(a) < 337.5
                joyDir_8(a) = 16;
            elseif angleFrom0(a) >= 337.5 && angleFrom0(a) <= 360
                joyDir_8(a) = 17;
            elseif angleFrom0(a) >= 0 && angleFrom0(a) < 22.5
                joyDir_8(a) = 17;
            elseif angleFrom0(a) >= 22.5 && angleFrom0(a) < 67.5
                joyDir_8(a) = 18;
            end
        end


        joyDir_lowVel = zeros(length(angleFrom0_lowVel),1);
        for a = 1:length(angleFrom0_lowVel)
            if angleFrom0_lowVel(a) >= 60 && angleFrom0_lowVel(a) < 120
                joyDir_lowVel(a) = 1;
            elseif angleFrom0_lowVel(a) >= 120 && angleFrom0_lowVel(a) < 180
                joyDir_lowVel(a) = 2;
            elseif angleFrom0_lowVel(a) >= 180 && angleFrom0_lowVel(a) < 240
                joyDir_lowVel(a) = 3;
            elseif angleFrom0_lowVel(a) >= 240 && angleFrom0_lowVel(a) < 300
                joyDir_lowVel(a) = 4;
            elseif angleFrom0_lowVel(a) >= 300 && angleFrom0_lowVel(a) <=360
                joyDir_lowVel(a) = 5;
            elseif angleFrom0_lowVel(a) >= 0 && angleFrom0_lowVel(a) < 60
                joyDir_lowVel(a) = 6;
            end
        end

        joyDir_8_lowVel = zeros(length(angleFrom0_lowVel),1);
        for a = 1:length(angleFrom0_lowVel)
            if angleFrom0_lowVel(a) >= 67.5 && angleFrom0_lowVel(a) < 112.5
                joyDir_8_lowVel(a) = 11;
            elseif angleFrom0_lowVel(a) >= 112.5 && angleFrom0_lowVel(a) < 157.5
                joyDir_8_lowVel(a) = 12;
            elseif angleFrom0_lowVel(a) >= 157.5 && angleFrom0_lowVel(a) < 202.5
                joyDir_8_lowVel(a) = 13;
            elseif angleFrom0_lowVel(a) >= 202.5 && angleFrom0_lowVel(a) < 247.5
                joyDir_8_lowVel(a) = 14;
            elseif angleFrom0_lowVel(a) >= 247.5 && angleFrom0_lowVel(a) < 292.5
                joyDir_8_lowVel(a) = 15;
            elseif angleFrom0_lowVel(a) >= 292.5 && angleFrom0_lowVel(a) < 337.5
                joyDir_8_lowVel(a) = 16;
            elseif angleFrom0_lowVel(a) >= 337.5 && angleFrom0_lowVel(a) <= 360
                joyDir_8_lowVel(a) = 17;
            elseif angleFrom0_lowVel(a) >= 0 && angleFrom0_lowVel(a) < 22.5
                joyDir_8_lowVel(a) = 17;
            elseif angleFrom0_lowVel(a) >= 22.5 && angleFrom0_lowVel(a) < 67.5
                joyDir_8_lowVel(a) = 18;
            end
        end

        % angle data w/ 6-region joystick 
        angleData{ii,jj} = table();
        angleData{ii,jj}.angleFrom0 = angleFrom0;
        angleData{ii,jj}.joyDir = joyDir;
        [nCount] = histcounts(joyDir,1:7);
        histJoyCountAll{ii,jj} = nCount;
        histJoyPerAll{ii,jj} = nCount./length(joyDir);

        joyData{ii,jj}.angleFrom0 = nan(length(joyKid),1);
        joyData{ii,jj}.angleFrom0(boutActiveInd) = angleFrom0;
        joyData{ii,jj}.joyDir = nan(length(joyKid),1);
        joyData{ii,jj}.joyDir(boutActiveInd) = joyDir;

        % angle data w/ 8-region joystick 
        angleData{ii,jj}.joyDir_8 = joyDir_8;
        [nCount_8] = histcounts(joyDir_8,11:19);
        histJoyCountAll_8{ii,jj} = nCount_8;
        histJoyPerAll_8{ii,jj} = nCount_8./length(joyDir_8);

        joyData{ii,jj}.joyDir_8 = nan(length(joyKid),1);
        joyData{ii,jj}.joyDir_8(boutActiveInd) = joyDir_8;

        % angle data for vel>0 only w/ 6-region joystick 
        angleData_lowVel{ii,jj} = table();
        angleData_lowVel{ii,jj}.angleFrom0_lowVel = angleFrom0_lowVel;
        angleData_lowVel{ii,jj}.joyDir_lowVel = joyDir_lowVel;
        [nCount] = histcounts(joyDir_lowVel,1:7);
%         if length(nCount) < 6
%             nCount(1,6) = 0; 
%         end
        histJoyCountAll_lowVel{ii,jj} = nCount;
        histJoyPerAll_lowVel{ii,jj} = nCount./length(joyDir);

        joyData{ii,jj}.angleFrom0_lowVel = nan(length(joyKid),1);
        joyData{ii,jj}.angleFrom0_lowVel(boutActiveInd_lowVel) = angleFrom0_lowVel;
        joyData{ii,jj}.joyDir_lowVel = nan(length(joyKid),1);
        joyData{ii,jj}.joyDir_lowVel(boutActiveInd_lowVel) = joyDir_lowVel;

        % angle data for vel>0 only w/ 8-region joystick 
        angleData_lowVel{ii,jj}.joyDir_8_lowVel = joyDir_8_lowVel;
        [nCount_8] = histcounts(joyDir_8_lowVel,11:19);
        histJoyCountAll_8_lowVel{ii,jj} = nCount_8;
        histJoyPerAll_8_lowVel{ii,jj} = nCount_8./length(joyDir_8_lowVel);

        joyData{ii,jj}.joyDir_8_lowVel = nan(length(joyKid),1);
        joyData{ii,jj}.joyDir_8_lowVel(boutActiveInd_lowVel) = joyDir_8_lowVel;

    end

    histJoyCountAll{ii,3} = mean([histJoyCountAll{ii,1}; histJoyCountAll{ii,2}],1);
    histJoyCountAll{ii,4} = std([histJoyCountAll{ii,1}; histJoyCountAll{ii,2}],0,1);
    histJoyCountAll{ii,5} = sum([histJoyCountAll{ii,1}; histJoyCountAll{ii,2}],1);
    histJoyPerAll{ii,3} = mean([histJoyPerAll{ii,1}; histJoyPerAll{ii,2}],1);
    histJoyPerAll{ii,4} = std([histJoyPerAll{ii,1}; histJoyPerAll{ii,2}],0,1);
    histJoyPerAll{ii,5} = histJoyCountAll{ii,5}./sum(histJoyCountAll{ii,5});

    histJoyCountAll_lowVel{ii,3} = mean([histJoyCountAll_lowVel{ii,1}; histJoyCountAll_lowVel{ii,2}],1);
    histJoyCountAll_lowVel{ii,4} = std([histJoyCountAll_lowVel{ii,1}; histJoyCountAll_lowVel{ii,2}],0,1);
    histJoyCountAll_lowVel{ii,5} = sum([histJoyCountAll_lowVel{ii,1}; histJoyCountAll_lowVel{ii,2}],1);
    histJoyPerAll_lowVel{ii,3} = mean([histJoyPerAll_lowVel{ii,1}; histJoyPerAll_lowVel{ii,2}],1);
    histJoyPerAll_lowVel{ii,4} = std([histJoyPerAll_lowVel{ii,1}; histJoyPerAll_lowVel{ii,2}],0,1);
    histJoyPerAll_lowVel{ii,5} = histJoyCountAll_lowVel{ii,5}./sum(histJoyCountAll_lowVel{ii,5});

    histJoyCountAll_8{ii,3} = mean([histJoyCountAll_8{ii,1}; histJoyCountAll_8{ii,2}],1);
    histJoyCountAll_8{ii,4} = std([histJoyCountAll_8{ii,1}; histJoyCountAll_8{ii,2}],0,1);
    histJoyCountAll_8{ii,5} = sum([histJoyCountAll_8{ii,1}; histJoyCountAll_8{ii,2}],1);
    histJoyPerAll_8{ii,3} = mean([histJoyPerAll_8{ii,1}; histJoyPerAll_8{ii,2}],1);
    histJoyPerAll_8{ii,4} = std([histJoyPerAll_8{ii,1}; histJoyPerAll_8{ii,2}],0,1);
    histJoyPerAll_8{ii,5} = histJoyCountAll_8{ii,5}./sum(histJoyCountAll_8{ii,5});

    histJoyCountAll_8_lowVel{ii,3} = mean([histJoyCountAll_8_lowVel{ii,1}; histJoyCountAll_8_lowVel{ii,2}],1);
    histJoyCountAll_8_lowVel{ii,4} = std([histJoyCountAll_8_lowVel{ii,1}; histJoyCountAll_8_lowVel{ii,2}],0,1);
    histJoyCountAll_8_lowVel{ii,5} = sum([histJoyCountAll_8_lowVel{ii,1}; histJoyCountAll_8_lowVel{ii,2}],1);
    histJoyPerAll_8_lowVel{ii,3} = mean([histJoyPerAll_8_lowVel{ii,1}; histJoyPerAll_8_lowVel{ii,2}],1);
    histJoyPerAll_8_lowVel{ii,4} = std([histJoyPerAll_8_lowVel{ii,1}; histJoyPerAll_8_lowVel{ii,2}],0,1);
    histJoyPerAll_8_lowVel{ii,5} = histJoyCountAll_8_lowVel{ii,5}./sum(histJoyCountAll_8_lowVel{ii,5});

    % legend: column 3 = mean S1/S2
    %         column 4 = std S1/S2
    %         column 5 = sum S1/S2 (count), pooled S1/S2 (percent)
end

angleMetricsKey = {'S1','S2','mean','std'}; % mean and std are calculated across sessions
metrics = angleMetrics.Properties.VariableNames;
for i = 1:length(metrics)
    angleMetrics.(metrics{i})(:,3) = mean(angleMetrics.(metrics{i})(:,1:2),2,'omitnan');
    angleMetrics.(metrics{i})(:,4) = std(angleMetrics.(metrics{i})(:,1:2),0,2,'omitnan');
end

joyPathMetricsKey = {'S1','S2','mean','std'}; % mean and std are calculated across sessions
metrics = joyPathMetrics.Properties.VariableNames;
for i = 1:length(metrics)
    joyPathMetrics.(metrics{i})(:,3) = mean(joyPathMetrics.(metrics{i})(:,1:2),2,'omitnan');
    joyPathMetrics.(metrics{i})(:,4) = std(joyPathMetrics.(metrics{i})(:,1:2),0,2,'omitnan');
end

%% Rearrange distribution of joystick directions

%%%% 6 slices:
% 1 = forward, 2 = forward left, 3 = backward left, 4 = backward, 5 = backward right, 6 = forward right;
signals = {'histJoyCount6_F', 'histJoyCount6_FL','histJoyCount6_BL','histJoyCount6_B','histJoyCount6_BR','histJoyCount6_FR'};
histJoyMetrics = table();
for si = 1:length(signals)
    histJoyMetrics.(signals{si}) = nan(12,2);
end

for i = 1:length(histJoyCountAll)
    %     ii = visitInd(i);
    for j = 1:2
        for k = 1:length(signals)
            if ~isempty(histJoyCountAll{i,j})
                histJoyMetrics.(signals{k})(i,j) = histJoyCountAll{i,j}(k);
            end
        end
    end
end

signals = {'histJoyPer6_F', 'histJoyPer6_FL','histJoyPer6_BL','histJoyPer6_B','histJoyPer6_BR','histJoyPer6_FR'};
for si = 1:length(signals)
    histJoyMetrics.(signals{si}) = nan(12,2);
end

for i = 1:length(histJoyPerAll)
    %     ii = visitInd(i);
    for j = 1:2
        for k = 1:length(signals)
            if ~isempty(histJoyPerAll{i,j})
                histJoyMetrics.(signals{k})(i,j) = histJoyPerAll{i,j}(k);
            end
        end
    end
end

signals = {'histJoyCount6_lowVel_F', 'histJoyCount6_lowVel_FL','histJoyCount6_lowVel_BL','histJoyCount6_lowVel_B','histJoyCount6_lowVel_BR','histJoyCount6_lowVel_FR'};
for si = 1:length(signals)
    histJoyMetrics.(signals{si}) = nan(12,2);
end

for i = 1:length(histJoyCountAll_lowVel)
    %     ii = visitInd(i);
    for j = 1:2
        for k = 1:length(signals)
            if ~isempty(histJoyCountAll_lowVel{i,j})
                histJoyMetrics.(signals{k})(i,j) = histJoyCountAll_lowVel{i,j}(k);
            end
        end
    end
end


signals = {'histJoyPer6_lowVel_F', 'histJoyPer6_lowVel_FL','histJoyPer6_lowVel_BL','histJoyPer6_lowVel_B','histJoyPer6_lowVel_BR','histJoyPer6_lowVel_FR'};
for si = 1:length(signals)
    histJoyMetrics.(signals{si}) = nan(12,2);
end

for i = 1:length(histJoyPerAll_lowVel)
    %     ii = visitInd(i);
    for j = 1:2
        for k = 1:length(signals)
            if ~isempty(histJoyPerAll_lowVel{i,j})
                histJoyMetrics.(signals{k})(i,j) = histJoyPerAll_lowVel{i,j}(k);
            end
        end
    end
end

%%%% 8 slices:
% 11 = forward, 12 = forward left, 13 = left, 14 = backward left, 15 = backward, 16 = backward right, 17 = right, 18 = forward right;
signals = {'histJoyCount8_F', 'histJoyCount8_FL','histJoyCount8_L','histJoyCount8_BL','histJoyCount8_B','histJoyCount8_BR','histJoyCount8_R','histJoyCount8_FR'};
for si = 1:length(signals)
    histJoyMetrics.(signals{si}) = nan(12,2);
end

for i = 1:length(histJoyCountAll_8)
    %     ii = visitInd(i);
    for j = 1:2
        for k = 1:length(signals)
            if ~isempty(histJoyCountAll_8{i,j})
                histJoyMetrics.(signals{k})(i,j) = histJoyCountAll_8{i,j}(k);
            end
        end
    end
end

signals = {'histJoyPer8_F', 'histJoyPer8_FL','histJoyPer8_L','histJoyPer8_BL','histJoyPer8_B','histJoyPer8_BR','histJoyPer8_R','histJoyPer8_FR'};
for si = 1:length(signals)
    histJoyMetrics.(signals{si}) = nan(12,2);
end

for i = 1:length(histJoyPerAll_8)
    %     ii = visitInd(i);
    for j = 1:2
        for k = 1:length(signals)
            if ~isempty(histJoyPerAll_8{i,j})
                histJoyMetrics.(signals{k})(i,j) = histJoyPerAll_8{i,j}(k);
            end
        end
    end
end

signals = {'histJoyCount8_lowVel_F', 'histJoyCount8_lowVel_FL','histJoyCount8_lowVel_L','histJoyCount8_lowVel_BL','histJoyCount8_lowVel_B','histJoyCount8_lowVel_BR','histJoyCount8_lowVel_R','histJoyCount8_lowVel_FR'};
for si = 1:length(signals)
    histJoyMetrics.(signals{si}) = nan(12,2);
end

for i = 1:length(histJoyCountAll_8_lowVel)
    %     ii = visitInd(i);
    for j = 1:2
        for k = 1:length(signals)
            if ~isempty(histJoyCountAll_8_lowVel{i,j})
                histJoyMetrics.(signals{k})(i,j) = histJoyCountAll_8_lowVel{i,j}(k);
            end
        end
    end
end


signals = {'histJoyPer8_lowVel_F', 'histJoyPer8_lowVel_FL','histJoyPer8_lowVel_L','histJoyPer8_lowVel_BL','histJoyPer8_lowVel_B','histJoyPer8_lowVel_BR','histJoyPer8_lowVel_R','histJoyPer8_lowVel_FR'};
for si = 1:length(signals)
    histJoyMetrics.(signals{si}) = nan(12,2);
end

for i = 1:length(histJoyPerAll_8_lowVel)
    %     ii = visitInd(i);
    for j = 1:2
        for k = 1:length(signals)
            if ~isempty(histJoyPerAll_8_lowVel{i,j})
                histJoyMetrics.(signals{k})(i,j) = histJoyPerAll_8_lowVel{i,j}(k);
            end
        end
    end
end

histJoyMetricsKey = {'S1','S2','mean','std'}; % mean and std are calculated across sessions
metrics = histJoyMetrics.Properties.VariableNames;
for i = 1:length(metrics)
    histJoyMetrics.(metrics{i})(:,3) = mean(histJoyMetrics.(metrics{i})(:,1:2),2,'omitnan');
    histJoyMetrics.(metrics{i})(:,4) = std(histJoyMetrics.(metrics{i})(:,1:2),0,2,'omitnan');
end

%% Plotting Joystick Histograms
if plotting == 1
figure; hold all; set(gcf,'name',[subID ': Polar Histogram of Joystick Direction (Pooled)']); 
tiledlayout(3,4)
for i = 1:12
    plotData = [angleData{i,1}; angleData{i,2}];
    if ~isempty(plotData)
        angleFrom0 = plotData.angleFrom0;
        nexttile
        h = polarhistogram(deg2rad(angleFrom0),6); hold all;
        set(gca,'rtick',[],'thetatick',0:60:360,'thetaticklabels',[])
        totalBouts = length(angleRangeAll{i,1})+length(angleRangeAll{i,2});
        nNaN = length(find(isnan(angleRangeAll{i,1})))+length(find(isnan(angleRangeAll{i,2})));
        nBouts = totalBouts-nNaN;
        %         title(['T' num2str(i) ': ' num2str(nBouts) ' (' num2str(round(nBouts/totalBouts*100,0)) '%)']);
        title(['T' num2str(i)],'fontsize',20);
    else
        nexttile;
        h0 = gca;
        h0.XAxis.Visible = 'off'; h0.YAxis.Visible = 'off';
    end
end


figure; hold all; set(gcf,'name',[subID ': Polar Histogram of Joystick Direction when Moving (Pooled)']); 
tiledlayout(3,4)
for i = 1:12
    plotData = [angleData_lowVel{i,1}; angleData_lowVel{i,2}];
    if ~isempty(plotData)
        angleFrom0 = plotData.angleFrom0_lowVel;
        nexttile
        h = polarhistogram(deg2rad(angleFrom0),6);
        set(gca,'rtick',[],'thetatick',0:60:360)
        totalBouts = length(angleRangeAll{i,1})+length(angleRangeAll{i,2});
        nNaN = length(find(isnan(angleRangeAll{i,1})))+length(find(isnan(angleRangeAll{i,2})));
        lowVelBouts = length(angleRangeAll_lowVel{i,1})+length(angleRangeAll_lowVel{i,2});
        nBouts = lowVelBouts-nNaN;
        title(['T' num2str(i) ': ' num2str(nBouts) ' (' num2str(round(nBouts/totalBouts*100,0)) '%)']);
    else
        nexttile;
        h0 = gca;
        h0.XAxis.Visible = 'off'; h0.YAxis.Visible = 'off';
    end
end

figure; hold all; set(gcf,'name',[subID ': Comparison of Activation & Movement Bouts Direction']); 
for i = 1:length(visits)
subplot(3,4,visitInd(i)); hold all;
bar([histJoyPerAll{i,3}; histJoyPerAll_lowVel{i,3}]','barwidth',1);
set(gca,'xtick',1:12,'xticklabel',{'F','FL','FR','B','BL','BR'}); 
title(['T' num2str(i)]);
if i == 4
    legend('All Activations', 'Moving Only'); 
end
end

figure; hold all; set(gcf,'name',[subID ': Traces of Joystick Bouts (Pooled)']); 
tiledlayout(3,4)
for i = 1:length(visits)
% for i = 9
%     nexttile
subplot(3,4,visitInd(i))
    hold all; 
    title(['T' num2str(i)]);
    for j = 1:2
        cond = joyBoutInd;
        for k = 1:length(cond{i,j})
            ind1 = cond{i,j}(k,1); 
            ind2 = cond{i,j}(k,2); 
            plot(cos(0:pi/32:2*pi)*100,sin(0:pi/32:2*pi)*100,'k','linewidth',0.5); 
            plot(joyData{i,j}.joyXKid(ind1:ind2,:), joyData{i,j}.joyYKid(ind1:ind2,:));
        end
    end

%     title(['T' num2str(i) ': ' num2str(length(cond{i,1})+length(cond{i,2}))]);
    axis square; 
            h0 = gca;
        h0.XAxis.Visible = 'off'; h0.YAxis.Visible = 'off';
end

figure; hold all; set(gcf,'name',[subID ': Traces of Joystick Bouts when Moving (Pooled)']); 
tiledlayout(3,4)
for i = 1:length(visits)
    %     nexttile
    subplot(3,4,visitInd(i))
    hold all; 
    title(['T' num2str(i)]);
    for j = 1:2
        cond = joyBoutInd_lowVel; 
        for k = 1:length(cond{i,j})
            ind1 = cond{i,j}(k,1); 
            ind2 = cond{i,j}(k,2); 
            plot(cos(0:pi/32:2*pi)*100,sin(0:pi/32:2*pi)*100,'k','linewidth',0.5); 
            plot(joyData{i,j}.joyXKid(ind1:ind2,:), joyData{i,j}.joyYKid(ind1:ind2,:));
        end

    end
    axis square; 
    totalBouts = (length(joyBoutInd_lowVel{i,1})+length(joyBoutInd_lowVel{i,2}))./(length(joyBoutInd{i,1})+length(joyBoutInd{i,2})); 
    totalBouts = round(totalBouts*100,0); 
    title(['T' num2str(i) ': ' num2str(length(cond{i,1})+length(cond{i,2})) ' (' num2str(totalBouts) '%)']);
end

end
%% Plotting Joystick Position vs. Velocity of Wheels 
% figure; hold all; 
% for i = 1 % visits 
%     for j = 1 % sessions
%         
%         moveBoutIndCopy = moveBoutInd; 
%         moveCount = 1; 
%         for m = 1:length(moveBoutInd{i,j})
%             [~, minInd(m)] = min(abs(joyBoutInd{i,j}(:,1) - moveBoutInd{i,j}(m,1))); 
% %             [~, minInd(2,m)] = min(abs(joyBoutInd{i,j}(:,2) - moveBoutInd{i,j}(m,2))); 
%         end
% 
%         [counts, ~] = histcounts(minInd,1:1:length(joyBoutInd{i,j})); 
%         dups = find(counts>1); 
% 
% %         for m = 1:length(dups)
% % %            nReps = length(find(minInd==dups(m))); 
% %            inds = find(minInd==dups(m)); 
% %            moveBoutIndCopy{i,j}(inds(1),2) = moveBoutInd{i,j}(inds(end),2); 
% %            moveBoutIndCopy{i,j}(inds(2:end),:) = []; 
% %         end
% 
%         for k = 1:length(joyBoutInd{i,j})
%             clear spin1 spin2 spin3 spin4 back forw
%             figure(k); hold all; 
%             ind1 = joyBoutInd{i,j}(k,1);
%             ind2 = joyBoutInd{i,j}(k,2); 
% 
%             if k == minInd(moveCount)
% %           if moveBoutInd{i,j}(moveCount,1) >= ind1 && moveBoutInd{i,j}(moveCount,2)-ind2 <= 500
%                moveInd1 = moveBoutInd{i,j}(moveCount,1); 
%                moveInd2 = moveBoutInd{i,j}(moveCount,2); 
%                
%                disp(['joy bout = ' num2str(k) '; move bout = ' num2str(moveCount)])
% 
%                velRbout = velData{i,j}.velRKid(ind1:moveInd2);
%                velLbout = velData{i,j}.velLKid(ind1:moveInd2);
%                joyXbout = joyData{i,j}.joyXKid(ind1:moveInd2);
%                joyYbout = joyData{i,j}.joyYKid(ind1:moveInd2);
%             else 
%                velRbout = velData{i,j}.velRKid(ind1:ind2);
%                velLbout = velData{i,j}.velLKid(ind1:ind2);
%                joyXbout = joyData{i,j}.joyXKid(ind1:ind2);
%                joyYbout = joyData{i,j}.joyYKid(ind1:ind2);
%             end
% 
%             spin1 = find(velRbout < 0 & velLbout > 0);
%             spin2 = find(velRbout > 0 & velLbout < 0);
%             spin3 = find(velRbout == 0 & velLbout ~=0);
%             spin4 = find(velRbout ~= 0 & velLbout ==0);
%             forw = find(velRbout > 0 & velLbout > 0);
%             back = find(velRbout < 0 & velLbout < 0);
% 
%             subplot(121); hold all; 
%             plot(joyXbout,joyYbout,'k.-'); axis square; ylim([-100,100]); xlim([-100, 100]);
% 
%             if k == minInd(moveCount)
%                 plot(joyData{i,j}.joyXKid(moveInd1),joyData{i,j}.joyYKid(moveInd1),'gs','markersize',10,'markerfacecolor','g');
%                 plot(joyData{i,j}.joyXKid(moveInd2),joyData{i,j}.joyYKid(moveInd2),'rs','markersize',10,'linewidth',2); 
%             end
% 
%             plot(joyXbout(spin1), joyYbout(spin1),'o','linewidth',2,'color',colors{3});
%             plot(joyXbout(spin2), joyYbout(spin2),'o','linewidth',2,'color',colors{4});
%             plot(joyXbout(spin3), joyYbout(spin3),'o','linewidth',2,'color',colors{5});
%             plot(joyXbout(spin4), joyYbout(spin4),'o','linewidth',2,'color',colors{1});
%             plot(joyXbout(forw), joyYbout(forw),'o','linewidth',2,'color',colors{8});
%             plot(joyXbout(back), joyYbout(back),'o','linewidth',2,'color',colors{9});
%             title('joystick position')
%             xlabel('x pos')
%             ylabel('y pos')
% 
%             subplot(122); hold all;
%             plot(velRbout,velLbout,'k.-'); axis square; ylim([-1,1]); xlim([-1,1]); 
%             
%             if k == minInd(moveCount)
%                 plot(velData{i,j}.velRKid(moveInd1),velData{i,j}.velLKid(moveInd1),'gs','markersize',10,'markerfacecolor','g');
%                 plot(velData{i,j}.velRKid(moveInd2),velData{i,j}.velLKid(moveInd2),'rs','markersize',10,'linewidth',2); 
%                 moveCount = moveCount+1; 
%             end
% 
%             plot(velRbout(spin1), velLbout(spin1),'o','linewidth',2,'color',colors{3});
%             plot(velRbout(spin2), velLbout(spin2),'o','linewidth',2,'color',colors{4});
%             plot(velRbout(spin3), velLbout(spin3),'o','linewidth',2,'color',colors{5});
%             plot(velRbout(spin4), velLbout(spin4),'o','linewidth',2,'color',colors{1});
%             plot(velRbout(forw), velLbout(forw),'o','linewidth',2,'color',colors{8});
%             plot(velRbout(back), velLbout(back),'o','linewidth',2,'color',colors{9});
%             title('velocity')
%             xlabel('right vel');
%             ylabel('left vel')
% 
% %             legend('','start moving','stop moving', 'R(-), L(+)', 'R(+), L(-)','R(0), L(~0)','R(~0), L(0)','R(+), L(+)','R(-), L(-)'); 
% 
%         end
% 
%     end
% end

%% Plotting Joystick Histograms

% figure; hold all; set(gcf,'name',[subID ': Distribution of Joystick Direction (Pooled)']);
% plotData = cell2mat(histJoyPerAll(:,5)); % POOLED data across S1/S2
% b = bar(visitInd,plotData,'stacked');
% b(1).FaceColor = green; 
% b(2).FaceColor = medgreen; 
% b(3).FaceColor = ltgreen; 
% b(4).FaceColor = yellow; 
% b(5).FaceColor = medyellow; 
% b(6).FaceColor = ltyellow; 
% l=legend('Forward','Forward Left','Forward Right','Backward','Backward Left','Backward Right'); 
% set(l,'location','northeastoutside','fontsize',10); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; xlim([0,13]); 
% ylabel('Proportion of Joystick Activations'); ylim([0,1]); 
% %%
% figure; hold all; set(gcf,'name',[subID ': Distribution of Joystick Direction (Pooled)']);
% plotData = cell2mat(histJoyPerAll(:,5)); % POOLED data across S1/S2
% % b = bar(plotData,'stacked');
% colors = [green; medgreen; ltgreen; yellow; medyellow; ltyellow]; 
% ylabels = {'Forward','Forward Left','Forward Right','Backward','Backward Left','Backward Right'};
% for i = 1:size(plotData,2)
% subplot(6,1,i); hold all; b = bar(visitInd,plotData(:,i)); b.FaceColor = colors(i,:); 
% ylabel(ylabels{i}); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; xlim([0,13]); 
% end
% 
% % l=legend('Forward','Forward Left','Forward Right','Backward','Backward Left','Backward Right'); 
% % set(l,'location','northeastoutside','fontsize',10); 
% 
% % ylabel('Proportion of Joystick Activations'); ylim([0,1]); 
% 
% %%
% figure; hold all;  set(gcf,'name',[subID ': Complexity of Joystick Use During Activation Bouts']); 
% subplot(221); hold all; 
% bar(angleMetrics.angleRangeMean(:,3)./360*100,'facecolor',dkgreen); 
% plot(angleMetrics.angleRangeMean(:,1)./360*100,'ks','markerfacecolor','k'); 
% plot(angleMetrics.angleRangeMean(:,2)./360*100,'ko');
% % legend('','S1','S2'); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Mean % Joystick Area'); ylim([0,100]); 
% 
% subplot(222); hold all; 
% bar(angleMetrics.angleRangeMin(:,3)./360*100,'facecolor',dkgreen); 
% plot(angleMetrics.angleRangeMin(:,1)./360*100,'ks','markerfacecolor','k'); 
% plot(angleMetrics.angleRangeMin(:,2)./360*100,'ko');
% legend('','S1','S2'); set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Min % Joystick Area');
% 
% subplot(223); hold all; 
% bar(angleMetrics.angleRangeMax(:,3)./360*100,'facecolor',dkgreen); 
% plot(angleMetrics.angleRangeMax(:,1)./360*100,'ks','markerfacecolor','k'); 
% plot(angleMetrics.angleRangeMax(:,2)./360*100,'ko');
% % legend('','S1','S2'); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Max % Joystick Area'); ylim([0,100]); 
% 
% subplot(224); hold all; 
% bar(angleMetrics.angleRangeMed(:,3)./360*100,'facecolor',dkgreen); 
% plot(angleMetrics.angleRangeMed(:,1)./360*100,'ks','markerfacecolor','k'); 
% plot(angleMetrics.angleRangeMed(:,2)./360*100,'ko');
% % legend('','S1','S2'); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Median % Joystick Area'); ylim([0,100]); 
% 
% %%
% figure; hold all;  set(gcf,'name',[subID ': Complexity of Joystick Use During Movement Bouts']); 
% subplot(221); hold all; 
% bar(angleMetrics.angleRangeMean_lowVel(:,3)./360*100,'facecolor',dkgreen); 
% plot(angleMetrics.angleRangeMean_lowVel(:,1)./360*100,'ks','markerfacecolor','k'); 
% plot(angleMetrics.angleRangeMean_lowVel(:,2)./360*100,'ko');
% % legend('','S1','S2'); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Mean % Joystick Area'); ylim([0,100]); 
% 
% subplot(222); hold all; 
% bar(angleMetrics.angleRangeMin_lowVel(:,3)./360*100,'facecolor',dkgreen); 
% plot(angleMetrics.angleRangeMin_lowVel(:,1)./360*100,'ks','markerfacecolor','k'); 
% plot(angleMetrics.angleRangeMin_lowVel(:,2)./360*100,'ko');
% legend('','S1','S2'); set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Min % Joystick Area');
% 
% subplot(223); hold all; 
% bar(angleMetrics.angleRangeMax_lowVel(:,3)./360*100,'facecolor',dkgreen); 
% plot(angleMetrics.angleRangeMax_lowVel(:,1)./360*100,'ks','markerfacecolor','k'); 
% plot(angleMetrics.angleRangeMax_lowVel(:,2)./360*100,'ko');
% % legend('','S1','S2'); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Max % Joystick Area'); ylim([0,100]); 
% 
% subplot(224); hold all; 
% bar(angleMetrics.angleRangeMed_lowVel(:,3)./360*100,'facecolor',dkgreen); 
% plot(angleMetrics.angleRangeMed_lowVel(:,1)./360*100,'ks','markerfacecolor','k'); 
% plot(angleMetrics.angleRangeMed_lowVel(:,2)./360*100,'ko');
% % legend('','S1','S2'); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Median % Joystick Area'); ylim([0,100]); 
% 
% %%
% figure; hold all;  set(gcf,'name',[subID ': Joystick Path Length']); 
% subplot(221); hold all; 
% bar(joyPathMetrics.pathLenMean(:,3),'facecolor',dkgreen); 
% plot(joyPathMetrics.pathLenMean(:,1),'ks','markerfacecolor','k'); 
% plot(joyPathMetrics.pathLenMean(:,2),'ko');
% % legend('','S1','S2'); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Mean Joystick Path Length'); 
% 
% subplot(222); hold all; 
% bar(joyPathMetrics.pathLenMin(:,3),'facecolor',dkgreen); 
% plot(joyPathMetrics.pathLenMin(:,1),'ks','markerfacecolor','k'); 
% plot(joyPathMetrics.pathLenMin(:,2),'ko');
% legend('','S1','S2'); set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Min % Joystick Path Length');
% 
% subplot(223); hold all; 
% bar(joyPathMetrics.pathLenMax(:,3),'facecolor',dkgreen); 
% plot(joyPathMetrics.pathLenMax(:,1),'ks','markerfacecolor','k'); 
% plot(joyPathMetrics.pathLenMax(:,2),'ko');
% % legend('','S1','S2'); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Max % Joystick Path Length'); 
% 
% subplot(224); hold all; 
% bar(joyPathMetrics.pathLenMed(:,3),'facecolor',dkgreen); 
% plot(joyPathMetrics.pathLenMed(:,1),'ks','markerfacecolor','k'); 
% plot(joyPathMetrics.pathLenMed(:,2),'ko');
% % legend('','S1','S2'); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Median % Joystick Path Length'); 
% 
% %%
% cellLen = cellfun(@(x) length(x), joyPathAll); 
% maxLen = max(sum(cellLen,2)); 
% boxData = nan(12,maxLen);
% for i = 1:length(visits)
%     visitData = [joyPathAll{i,1}; joyPathAll{i,2}]'; 
%     boxData(visitInd(i),1:length(visitData)) = visitData; 
% end
% 
% figure; hold all; 
% boxchart(boxData','boxfacecolor',dkgreen,'markercolor',dkgreen);
% title('Distribution of Joystick Path Length')
% xlabel('Visit');  box off; ylabel('Joystick Path Length')
% ylim([0,30]);
% 
% %%
% figure; hold all;  set(gcf,'name',[subID ': Joystick % at Edge']); 
% subplot(221); hold all; 
% bar(joyPathMetrics.perMaxMean(:,3),'facecolor',dkgreen); 
% plot(joyPathMetrics.perMaxMean(:,1),'ks','markerfacecolor','k'); 
% plot(joyPathMetrics.perMaxMean(:,2),'ko');
% % legend('','S1','S2'); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Mean Joystick % at Edge'); 
% 
% subplot(222); hold all; 
% bar(joyPathMetrics.perMaxMin(:,3),'facecolor',dkgreen); 
% plot(joyPathMetrics.perMaxMin(:,1),'ks','markerfacecolor','k'); 
% plot(joyPathMetrics.perMaxMin(:,2),'ko');
% legend('','S1','S2'); set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Min Joystick % at Edge');
% 
% subplot(223); hold all; 
% bar(joyPathMetrics.perMaxMax(:,3),'facecolor',dkgreen); 
% plot(joyPathMetrics.perMaxMax(:,1),'ks','markerfacecolor','k'); 
% plot(joyPathMetrics.perMaxMax(:,2),'ko');
% % legend('','S1','S2'); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Max Joystick % at Edge'); 
% 
% subplot(224); hold all; 
% bar(joyPathMetrics.perMaxMed(:,3),'facecolor',dkgreen); 
% plot(joyPathMetrics.perMaxMed(:,1),'ks','markerfacecolor','k'); 
% plot(joyPathMetrics.perMaxMed(:,2),'ko');
% % legend('','S1','S2'); 
% set(gca,'xtick',1:12); xlabel('Visit');  box off; 
% ylabel('Median Joystick % at Edge'); 
% 
% %%
% cellLen = cellfun(@(x) length(x), perMaxAll); 
% maxLen = max(sum(cellLen,2)); 
% boxData = nan(12,maxLen);
% for i = 1:length(visits)
%     visitData = [perMaxAll{i,1}; perMaxAll{i,2}]'; 
%     boxData(visitInd(i),1:length(visitData)) = visitData; 
% end
% 
% figure; hold all; 
% boxchart(boxData','boxfacecolor',dkgreen,'markercolor',dkgreen);
% title('Distribution of Joystick Path Length')
% xlabel('Visit');  box off; ylabel('Joystick Path Length')
% 
% %%
% cellLen = cellfun(@(x) length(x), angleRangeAll); 
% maxLen = max(sum(cellLen,2)); 
% boxData = nan(12,maxLen);
% for i = 1:length(visits)
%     visitData = [angleRangeAll{i,1}./360*100; angleRangeAll{i,2}./360*100]'; 
%     boxData(visitInd(i),1:length(visitData)) = visitData; 
% end
% 
% figure; hold all; 
% boxchart(boxData','boxfacecolor',dkgreen,'markercolor',dkgreen);
% title('Distribution of % Joystick Area Covered Per Bout')
% xlabel('Visit');  box off; ylabel('% 360 degrees')
% 
% %%
% cellLen = cellfun(@(x) length(x), angleRangeAll_lowVel); 
% maxLen = max(sum(cellLen,2)); 
% boxData = nan(12,maxLen);
% visitData = []; 
% for i = 1:length(visits)
%     visitData = [angleRangeAll_lowVel{i,1}./360*100; angleRangeAll_lowVel{i,2}./360*100]'; 
%     boxData(visitInd(i),1:length(visitData)) = visitData; 
% end
% 
% figure; hold all; 
% boxchart(boxData','boxfacecolor',dkgreen,'markercolor',dkgreen);
% title('Distribution of % Joystick Area Covered per Bout when Moving ')
% xlabel('Visit');  box off; ylabel('% 360 degrees');

%%
% 
% save(['Analyzed_' subID],'adultDrive','angleMetrics','driveBouts','driveMetrics','joyPathMetrics',...
%                 'histJoyCountAll','histJoyPerAll','histJoyCountAll_lowVel','histJoyPerAll_lowVel',...
%                 'histJoyCountAll_8','histJoyPerAll_8','histJoyCountAll_8_lowVel','histJoyPerAll_8_lowVel','-v7.3'); 

save(['Analyzed_' subID],'adultDrive','angleMetrics','driveBouts','driveMetrics','joyPathMetrics','histJoyMetrics','pathMetrics',...
        'perMaxAll','angleRangeAll',...
        'joyBoutInd','moveBoutInd','joyBoutInd_lowVel',...
        'joyBoutDur_All','joyBoutVel_All','joyBoutAbsVel_All','joyBoutVelPos_All','joyBoutVelNeg_All','joyBoutAbsVelMax_All',...
        'joyBoutDur_lowVel_All','joyBoutVel_lowVel_All','joyBoutAbsVel_lowVel_All','joyBoutVelPos_lowVel_All','joyBoutVelNeg_lowVel_All','joyBoutAbsVelMax_lowVel_All',...
        'moveBoutDur_All','moveBoutVel_All','moveBoutAbsVel_All','moveBoutVelPos_All','moveBoutVelNeg_All','moveBoutAbsVelMax_All',...
        'joyPathAll','moveDelayDur','joyBoutInd_lowVel_i','-v7.3'); 

% adult driving 
% joystick complexity - average complexity per bout
% speed modulation

%%

signalGroups = {'driveMetrics','driveBouts','angleMetrics','joyPathMetrics','histJoyMetrics','pathMetrics'};
% speedVals = [0.21, 0.3, 0.4, 0.5, 0.6];
tbl = table();
tbl.participant = ones(24,1)*str2double(subID(end-1:end));
tbl.participantCount = ones(24,1)*subj;
tbl.visit = [(1:12)'; (1:12)']; 
tbl.session = [ones(12,1); ones(12,1)*2]; 
tbl.sessionCount = [(1:12)'*2-1; (1:12)'*2]; 
tbl.speedSetting = speed(:); 
tbl.speed = speedVals(:); 
tbl.ALP = [ALPscores; ALPscores]; 
for i = 1:length(signalGroups)
    grp = eval(signalGroups{i}); 
    flds = fields(grp); flds = flds(1:end-3);
%     disp(flds)
    for j = 1:length(flds)
        tbl.(flds{j}) = nan(24,1); 
        for k = 1:2
            tbl.(flds{j})((1:12)+ (k-1)*12,:) =  grp.(flds{j})(:,k); 
        end
    end
end

% save(['tbl_' subID],'tbl');

bigTable = [bigTable; tbl];



end

%%
% cd('C:\Users\kingra\OneDrive - UW\2022 Pemdiatric Powered Mobility\Data Analysis\ILABS Full Analysis'); 
cd('/Users/kingra/Library/CloudStorage/OneDrive-UW/2022 Pediatric Powered Mobility/Data Analysis/ILABS Full Analysis')
save('bigTable','bigTable'); 
writetable(bigTable,'bigTable.csv');